import std;
import std.io;
import std.io.print;
import std.box;
import std.vec;

impl Box(i64);
impl Display_Box(Io, i64);

impl Vec(i32);
impl Display_Vec(Io, i32);

pub as drop(inout self: i32@reg+mem) {};
pub as clone(in self: i32@reg+mem, out buff: i32@reg+mem) {
    buff = self;
};

fn find_prime_number(max: i32@rdi) {
    let numbers: defer Vec_i32@stack;
    numbers.new();

    let remain: i32@rdx;
    let prime: *i32@r8;
    let numbers_len: i64@r9;
    let flag: bool@r10;

    for(let i: i32@r11 = 2; flag.lt(i, max); ++i) {
        let prime_flag: bool@r12 = true;

        numbers.len(numbers_len);
        for(let k: i64@r13 = 0; flag.lt(k, numbers_len); ++k) {
            let i_copy: i32@rax = i;
            remain = 0;
            numbers.index(k, prime);
            i_copy.idiv(remain, *prime);

            if(flag.eq(remain, 0)) {
                k = numbers_len;
                prime_flag = false;
            };
        };

        if(prime_flag) {
            numbers.push(i);
        };
    };

    println(numbers);
};

fn main() {
    let max: i32@rdi = 100000;
    find_prime_number(max);
};

