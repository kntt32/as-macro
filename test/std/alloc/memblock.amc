import core;
import core.cmp;
import core.panic;

pub struct MemBlock {
    page_ptr: *void,
    page_count: i64,
    alloc_line: i64,// line: 16byte
    alloc_count: i64,
};

pub as new(out self: MemBlock@mem, in page_count: i64@reg+mem+imm) {
    let addr: *void@auto = null;
    let flag: bool@auto;

    if(flag.neq(page_count, 0)) {
        let size: i64@auto = page_count;
        size.imul(4096);
        addr.mmap(size, 0x3, 0x22, -1, 0)
            .panic_null();
    };

    self.page_ptr = addr;
    self.page_count = page_count;
    self.alloc_line = 0;
    self.alloc_count = 0;
};

pub as get_lower_bound(in self: MemBlock@mem, out lower_bound: *void@reg+mem) {
    lower_bound = self.page_ptr;
};

pub as get_upper_bound(in self: MemBlock@mem, out upper_bound: *void@reg+mem) {
    upper_bound = self.page_count;
    upper_bound.imul(4096);
    upper_bound += self.page_ptr;
};

pub as alloc(inout self: MemBlock@mem, in size: i64@reg+mem+imm, out ptr: *void@reg+mem) {
    let flag: bool@auto;

    let need_line: i64@auto = size;
    need_line += 15;
    need_line.shr(4);

    let alloc_line: i64@auto = self.alloc_line;
    alloc_line += need_line;

    let max_alloc_line: i64@auto = self.page_count;
    max_alloc_line.shl(8);

    if(flag.gt(alloc_line, max_alloc_line)) {
        ptr = null;
    }else {
        ++ self.alloc_count;
        
        ptr = self.alloc_line;
        ptr.shl(4);
        ptr += self.page_ptr;

        self.alloc_line = alloc_line;
    };
};

pub as dealloc(inout self: MemBlock@mem, in ptr: *void@reg+mem) {
    let flag: bool@auto;
    
    if(flag.neq(ptr, null)) {
        self.alloc_count.panic_eq(0, "doubling free detected");

        self.page_ptr.panic_gt(ptr, "out of page");
        
        let upper_bound: *void@auto = self.page_count;
        self.get_upper_bound(upper_bound);
        upper_bound.panic_le(ptr, "out of page");

        -- self.alloc_count;
    };

    if(flag.eq(self.alloc_count, 0)) {
        self.alloc_line = 0;
    };
};

pub as drop(inout self: MemBlock@mem) {
    self.alloc_count.panic_neq(0, "memory leak detected");
    
    let addr: *void@auto = self.page_ptr;
    let size: i64@auto = self.page_count;
    size.imul(4096);
    munmap(addr, size);

    self.page_ptr = null;
    self.page_count = 0;
    self.alloc_line = 0;
    self.alloc_count = 0;
};




