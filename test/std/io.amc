import core;
import core.str;
import core.cmp;
import core.fmt;
import std;
import std.syscall;

pub struct Io {
    fd: i32,
    buff: [char; 1024],
    len: i64,
};

impl Display(Io);

pub as new(out self: Io@mem, in fd: i32@reg+imm) {
    self.fd = fd;
    self.len = 0;
};

pub as flush(inout self: Io@mem) {
    let flag: bool@auto;
    if(neq(flag, self.len, 0)) {
        let msg: *char@auto;
        msg =& self.buff;
        let len: i64@auto = self.len;
        let fd: i32@auto = self.fd;
        write(fd, msg, len);
        self.len = 0;
    };
};

pub as write(inout self: Io@mem, in str: Str@mem) {
    let str_ptr: *char@auto;
    str.as_ptr(str_ptr);
    let str_ptr_i8: *i8@auto = str_ptr;
    let len: i64@auto;
    str.len(len);
    self.write(str_ptr_i8, len);
};

pub as write(inout self: Io@mem, in data: *i8@reg+mem, in len: i64@reg+mem+imm) {
    let buff_new_len: i64@auto = self.len;
    buff_new_len += len;
    let flag: bool@auto;
    if(ge(flag, buff_new_len, 1024)) {
        flush(self);
    };

    let dst: *void@auto;
    dst =& self.buff;
    dst += self.len;
    let src: *void@auto;
    src = data;

    memcpy(dst, src, len);
    self.len += len;
};

pub as drop(inout self: Io@mem) {
    self.flush();
};

