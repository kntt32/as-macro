import std;
import core.cmp;
import std.io;
import std.io.print;
import std.vec;

impl Vec(u32);
impl Display_Vec(Io, u32);

fn main() {
    let flag: bool@auto = false;
    flag = flag.not();
    printfln(flag);

    let vec1: defer Vec_u32@stack;
    let vec2: defer Vec_u32@stack;
    vec1.new();
    vec1.push(1);
    vec1.push(2);
    vec1.push(3);

    vec2.new();
    vec2.push(1);
    vec2.push(2);
    vec2.push(3);

    printfln(flag.eq(vec1, vec2));
};
/*
fn get_prime_numbers() {
    const MAX: u64 = 36000000;
    const MAX_SQRT: u64 = 6000;
    static FLAGS: [bool; 36000000];

    let flag: bool@auto;
    let flags: *bool@auto;
    flags =& FLAGS;
    flags += 2;

    for(let i: u64@auto = 2; flag.lt(i, MAX); ++i) {
        *flags = true;
        ++ flags;
    };
    flags =& FLAGS;
    flags += 2;

    for(let i: u64@auto = 2; flag.lt(i, MAX_SQRT); ++i) {
        if(*flags) {
            let local_flags: *bool@auto = flags;
            let k: u64@auto = i;
            for(k += i; flag.lt(k, MAX); k += i) {
                local_flags += i;
                *local_flags = false;
            };
        };
        flags += 1;
    };

    flags =& FLAGS;
    flags += 2;
    let str: Str@stack;
    str.from(", ");
    for(let i: u64@auto = 2; flag.lt(i, MAX); ++i) {
        if(*flags) {
            printf(i);
            printf(str);
        };
        ++ flags;
    };
    print("\n");
};

*/
