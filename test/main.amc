import std;
import std.io;
import std.io.print;
import std.vec;
import std.string;

impl Vec(u32);
impl Display_Vec(Io, u32);
pub as drop(x: u32@reg+mem) {};

const MAX: i64 = 10000;

fn main() {
    let numbers: defer Vec_u32@stack;
    numbers.new();
    numbers.resize(MAX);
    let numbers_len: u64@auto = 0;
    let flag: bool@auto;

    for(let i: u64@auto = 2; flag.lt(i, MAX); ++i) {
        let prime_flag: bool@auto = true;

        for(let k: u64@auto = 0; flag.lt(k, numbers_len); ++k) {
            let prime: *u32@auto;
            numbers.index(k, prime);
            
            let remaining: u32@auto = 0;
            let divided: u32@auto = i;
            divided.div(remaining, *prime);
            if(flag.eq(remaining, 0)) {
                k = numbers_len;
                prime_flag = false;
            };
        };

        if(prime_flag) {
            let prime: *u32@auto;
            numbers.index(numbers_len, prime);
            *prime = i;
            ++ numbers_len;
        };
    };

    numbers.resize(numbers_len);
    printfln(numbers);

    println("Hello, World!");
};

