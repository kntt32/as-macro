import core;
import core.cmp;
import core.syscall;

pub as read(out readcount: u64@rax, in fd: i32@rdi, inout buff: *u8@rsi, in count: u64@rdx) {
    let readcount_mem: u64@stack;
    {
        let number: i64@rax = 0;
        syscall(number);

        panic_lt(number, 0, "syscall.amc:read: error occured");
        readcount_mem = number;
    };
    readcount = readcount_mem;
};

pub as read(out readcount: u64@reg+mem, in fd: i32@reg+mem+imm, inout buff: *u8@reg+mem, in count: u64@reg+mem+imm) {
    let readcount_mem: u64@stack;
    let fd_mem: i32@stack = fd;
    let buff_mem: *u8@stack = buff;
    let count_mem: u64@stack = count;
    
    {
        let readcount_rax: u64@rax;
        let fd_rdi: i32@rdi = fd_mem;
        let buff_rsi: *u8@rsi = buff_mem;
        let count_rdx: u64@rdx = count_mem;

        read(readcount_rax, fd_rdi, buff_rsi, count_rdx);

        readcount_mem = readcount_rax;
    };
    
    readcount = readcount_mem;
};

pub const STDIN: i32 = 0;
pub const STDOUT: i32 = 1;
pub const STDERR: i32 = 2;

pub as write(in fd: i32@rdi, in msg: *u8@rsi, in len: u64@rdx) {
    let number: i64@rax = 1;
    syscall(number);
};

pub as write(in fd: i32@reg+mem+imm, in msg: *u8@reg+mem, in len: u64@reg+mem+imm) {
    let fd_mem: i32@stack = fd;
    let msg_mem: *u8@stack = msg;
    let len_mem: u64@stack = len;

    let fd_rdi: i32@rdi = fd_mem;
    let msg_rsi: *u8@rsi = msg_mem;
    let len_rdx: u64@rdx = len_mem;

    write(fd_rdi, msg_rsi, len_rdx);
};

pub as close(in fd: i32@rdi) {
    let number: i64@rax = 3;
    syscall(number);
};

pub as close(in fd: i32@reg+mem+imm) {
    let fd_mem: i32@stack = fd;
    let fd_rdi: i32@rdi = fd_mem;

    close(fd_rdi);
};

pub const MMAP_PROT_NONE: i64 = 0x0;
pub const MMAP_PROT_READ: i64 = 0x1;
pub const MMAP_PROT_WRITE: i64 = 0x2;
pub const MMAP_PROT_EXEC: i64 = 0x4;
pub const MMAP_MAP_SHARED: i64 = 0x01;
pub const MMAP_MAP_PRIVATE: i64 = 0x02;
pub const MMAP_MAP_FIXED: i64 = 0x10;
pub const MMAP_MAP_ANONYMOUS: i64 = 0x20;

pub as mmap(inout addr: *void@rdi, in len: u64@rsi, in prot: i64@rdx, in flags: i64@r10, in fd: i32@r8, in offset: i64@r9) {
    let number: i64@rax = 9;
    syscall(number);
    let flag: bool@r11;
    if(flag.lt(number, 0)) {
        addr = null;
    }else {
        addr = number;
    };
};

pub as mmap(inout addr: *void@reg+mem+imm, in len: u64@reg+mem+imm, in prot: i64@reg+mem+imm, in flags: i64@reg+mem+imm, in fd: i32@reg+mem+imm, in offset: i64@reg+mem+imm) {
    let addr_mem: *void@stack = addr;
    let len_mem: u64@stack = len;
    let prot_mem: i64@stack = prot;
    let flags_mem: i64@stack = flags;
    let fd_mem: i32@stack = fd;
    let offset_mem: i64@stack = offset;

    {
        let addr_rdi: *void@rdi = addr_mem;
        let len_rsi: u64@rsi = len_mem;
        let prot_rdx: i64@rdx = prot_mem;
        let flags_r10: i64@r10 = flags_mem;
        let fd_r8: i32@r8 = fd_mem;
        let offset_r9: i64@r9 = offset_mem;

        mmap(addr_rdi, len_rsi, prot_rdx, flags_r10, fd_r8, offset_r9);

        addr_mem = addr_rdi;
    };

    addr = addr_mem;
};

pub as munmap(in addr: *void@rdi, in size: u64@rsi) {
    let flag: bool@r8;
    if(flag.neq(addr, null)) {
        let number: i64@rax = 11;
        syscall(number);
        let flag: bool@r11;
        if(flag.lt(number, 0)) {
            panic("munmap error");
        };
    };
    addr = null;
};

pub as munmap(in addr: *void@reg+mem+imm, in size: u64@reg+mem+imm) {
    let addr_mem: *void@stack = addr;
    let size_mem: u64@stack = size;

    {
        let addr_rdi: *void@rdi = addr_mem;
        let size_rsi: u64@rsi = size_mem;
        munmap(addr_rdi, size_rsi);
    };
    addr = null;
};

pub as exit(in status: i32@rdi) {
    let number: i64@rax = 60;
    syscall(number);
};

pub const AT_FDCWD: i32 = -100;

pub const O_RDONLY: u64 = 0;
pub const O_WRONLY: u64 = 1;
pub const O_RDWR: u64 = 2;

pub const O_CREAT: u64 = 0x40;
pub const O_TRUNC: u64 = 0x200;
pub const O_APPEND: u64 = 0x400;
pub const O_NONBLOCK: u64 = 0x800;
pub const O_DIRECTORY: u64 = 0x10000;

pub as openat(out fd: i32@rax, in dirfd: i32@rdi, in pathname: *char@rsi, in flags: u64@rdx, in mode: u64@r10) {
    let fd_mem: i32@stack;
    {
        let number: i64@rax = 257;
        syscall(number);
        fd_mem = number;
    };
    fd = fd_mem;
};

pub as openat(out fd: i32@reg+mem, in dirfd: i32@reg+mem+imm, in pathname: *char@reg+mem, in flags: u64@reg+mem+imm, in mode: u64@reg+mem+imm) {
    let fd_mem: i32@stack;
    let dirfd_mem: i32@stack = dirfd;
    let pathname_mem: *char@stack = pathname;
    let flags_mem: u64@stack = flags;
    let mode_mem: u64@stack = mode;

    {
        let fd_rax: i32@rax;
        let dirfd_rdi: i32@rdi = dirfd_mem;
        let pathname_rsi: *char@rsi = pathname_mem;
        let flags_rdx: u64@rdx = flags_mem;
        let mode_r10: u64@r10 = mode_mem;

        openat(fd_rax, dirfd_rdi, pathname_rsi, flags_rdx, mode_r10);
    
        fd_mem = fd_rax;
    };

    fd = fd_mem;
};


