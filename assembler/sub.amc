import core_x64;
import std;

struct Point {
    x: i64,
    y: i64
};

pub as mov(dst: Point@mem, src: Point@mem) {
    push(rax);
    let a: i64@rax;
    a = src.x;
    dst.x = a;
    a = src.y;
    dst.y = a;
    pop(rax);
};

as recursive() {
    recursive();
};

fn addptr(val: i64@rax, ptr: Point@stack) {
    val = ptr.x;
    add(val, ptr.y);
};

fn test(n: i64@rax) {
    let array: [i64; 5]@stack;
    array[0] = 82;
    array[1] = 72;
    array[2] = 21;
    array[3] = 46;
    array[4] = 19;

    n = array[3];
};

fn write_test() {
    let str: [char; 6]@stack;
    str[0] = 'h';
    str[1] = 'e';
    str[2] = 'l';
    str[3] = 'l';
    str[4] = 'o';
    str[5] = '\n';

    let fd: i64@rdi;
    let msg: char*@rsi;
    let len: i64@rdx;

    fd = 1;
    lea(msg, str[0]);
    len = 6;

    write(fd, msg, len);
};

pub fn num(val: i64@rax, src: i64@rdi) {
    let flag: bool@rsi;
    flag = true;
    let ptr: Point@stack;
    ptr.x = src;
    ptr.y = 3;
    addptr(val, ptr);
    test(val);
    val = alignof i64;

    write_test();
};


