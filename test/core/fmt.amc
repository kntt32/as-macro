import core;
import core.cmp;
import core.slice;
import core.str;

pub template Display(Formatter) {
    pub as display(inout self: $(Formatter)@mem, in object: i64@reg+mem+imm) {
        let object_copy: i64@rax = object;
        let str: Str@stack;
        let flag: bool@r9;

        if(flag.lt(object_copy, 0)) {
            str.from_char_array("-");
            self.write(str);
            object_copy.neg();
        };

        let buffer: [char; 32]@stack;
        buffer[31] = '\0';
        let buffer_index: i64@r11 = 31;
        let buffer_ptr: *char@r12;
        
        let remainder: i64@rdx;
        let divisor: i64@r8 = 10;
        
        while(flag.neq(object_copy, 0)) {
            remainder = 0;
            object_copy.div(remainder, divisor);
            let remainder_i8: i8@r10 = remainder;

            buffer_index -= 1;
            buffer_ptr =& buffer;
            buffer_ptr += buffer_index;
            *buffer_ptr = '0';
            *buffer_ptr += remainder_i8;
        };

        buffer_ptr =& buffer;
        buffer_ptr += buffer_index;
        
        str.from(buffer_ptr);
        self.write(str);
    };
};
