pub as adc(_: b8@rax, _: b8@imm) : (double: 0x14, ib);
pub as adc(_: b16@rax, _: b16@imm) : (double: 0x15, iw);
pub as adc(_: b32@rax, _: b32@imm) : (double: 0x15, id);
pub as adc(_: b64@rax, _: b32@imm) : (double: 0x15, id);
pub as adc(_: b16@reg+mem, _: b8@imm) : (double: 0x83, /2, ib);
pub as adc(_: b32@reg+mem, _: b8@imm) : (double: 0x83, /2, ib);
pub as adc(_: b64@reg+mem, _: b8@imm) : (double: 0x83, /2, ib);
pub as adc(_: b8@reg+mem, _: b8@imm) : (double: 0x80, /2, ib);
pub as adc(_: b16@reg+mem, _: b16@imm) : (double: 0x81, /2, iw);
pub as adc(_: b32@reg+mem, _: b32@imm) : (double: 0x81, /2, id);
pub as adc(_: b64@reg+mem, _: b32@imm) : (double: 0x81, /2, id);
pub as adc(_: b8@reg+mem, _: b8@reg) : (double: 0x10, /r);
pub as adc(_: b16@reg+mem, _: b16@reg) : (double: 0x11, /r);
pub as adc(_: b32@reg+mem, _: b32@reg) : (double: 0x11, /r);
pub as adc(_: b64@reg+mem, _: b64@reg) : (double: 0x11, /r);
pub as adc(_: b8@reg, _: b8@reg+mem) : (double: 0x12, /r);
pub as adc(_: b16@reg, _: b16@reg+mem) : (double: 0x13, /r);
pub as adc(_: b32@reg, _: b32@reg+mem) : (double: 0x13, /r);
pub as adc(_: b64@reg, _: b64@reg+mem) : (double: 0x13, /r);

pub as add(_: b8@rax, _: b8@imm) : (double: 0x04, ib);
pub as add(_: b16@rax, _: b16@imm) : (double: 0x05, iw);
pub as add(_: b32@rax, _: b32@imm) : (double: 0x05, id);
pub as add(_: b64@rax, _: b32@imm) : (double: 0x05, id);
pub as add(_: b16@reg+mem, _: b8@imm) : (double: 0x83, /0, ib);
pub as add(_: b32@reg+mem, _: b8@imm) : (double: 0x83, /0, ib);
pub as add(_: b64@reg+mem, _: b8@imm) : (double: 0x83, /0, ib);
pub as add(_: b8@reg+mem, _: b8@imm) : (double: 0x80, /0, ib);
pub as add(_: b16@reg+mem, _: b16@imm) : (double: 0x81, /0, iw);
pub as add(_: b32@reg+mem, _: b32@imm) : (double: 0x81, /0, id);
pub as add(_: b64@reg+mem, _: b32@imm) : (double: 0x81, /0, id);
pub as add(_: b8@reg+mem, _: b8@reg) : (double: 0x00, /r);
pub as add(_: b16@reg+mem, _: b16@reg) : (double: 0x01, /r);
pub as add(_: b32@reg+mem, _: b32@reg) : (double: 0x01, /r);
pub as add(_: b64@reg+mem, _: b64@reg) : (double: 0x01, /r);
pub as add(_: b8@reg, _: b8@reg+mem) : (double: 0x02, /r);
pub as add(_: b16@reg, _: b16@reg+mem) : (double: 0x03, /r);
pub as add(_: b32@reg, _: b32@reg+mem) : (double: 0x03, /r);
pub as add(_: b64@reg, _: b64@reg+mem) : (double: 0x03, /r);

pub as and(_: b8@rax, _: b8@imm) : (double: 0x24, ib);
pub as and(_: b16@rax, _: b16@imm) : (double: 0x25, iw);
pub as and(_: b32@rax, _: b32@imm) : (double: 0x25, id);
pub as and(_: b64@rax, _: b32@imm) : (double: 0x25, id);
pub as and(_: b16@reg+mem, _: b8@imm) : (double: 0x83, /4, ib);
pub as and(_: b32@reg+mem, _: b8@imm) : (double: 0x83, /4, ib);
pub as and(_: b64@reg+mem, _: b8@imm) : (double: 0x83, /4, ib);
pub as and(_: b8@reg+mem, _: b8@imm) : (double: 0x80, /4, ib);
pub as and(_: b16@reg+mem, _: b16@imm) : (double: 0x81, /4, iw);
pub as and(_: b32@reg+mem, _: b32@imm) : (double: 0x81, /4, id);
pub as and(_: b64@reg+mem, _: b32@imm) : (double: 0x81, /4, id);
pub as and(_: b8@reg+mem, _: b8@reg) : (double: 0x20, /r);
pub as and(_: b16@reg+mem, _: b16@reg) : (double: 0x21, /r);
pub as and(_: b32@reg+mem, _: b32@reg) : (double: 0x21, /r);
pub as and(_: b64@reg+mem, _: b64@reg) : (double: 0x21, /r);
pub as and(_: b8@reg, _: b8@reg+mem) : (double: 0x22, /r);
pub as and(_: b16@reg, _: b16@reg+mem) : (double: 0x23, /r);
pub as and(_: b32@reg, _: b32@reg+mem) : (double: 0x23, /r);
pub as and(_: b64@reg, _: b64@reg+mem) : (double: 0x23, /r);

pub as bsf(_: b16@reg, _: b16@reg+mem) : (double: 0x0f, 0xbc, /r);
pub as bsf(_: b32@reg, _: b32@reg+mem) : (double: 0x0f, 0xbc, /r);
pub as bsf(_: b64@reg, _: b64@reg+mem) : (double: 0x0f, 0xbc, /r);

pub as bsr(_: b16@reg, _: b16@reg+mem) : (double: 0x0f, 0xbd, /r);
pub as bsr(_: b32@reg, _: b32@reg+mem) : (double: 0x0f, 0xbd, /r);
pub as bsr(_: b64@reg, _: b64@reg+mem) : (double: 0x0f, 0xbd, /r);

pub as bswap(_: b32@reg) : (double: 0x0f, 0xc8, rd);
pub as bswap(_: b64@reg) : (double: 0x0f, 0xc8, rq);

pub as bt(_: b16@reg+mem, _: b16@reg) : (double: 0x0f, 0xa3, /r);
pub as bt(_: b32@reg+mem, _: b32@reg) : (double: 0x0f, 0xa3, /r);
pub as bt(_: b64@reg+mem, _: b64@reg) : (double: 0x0f, 0xa3, /r);
pub as bt(_: b16@reg+mem, _: b8@imm) : (double: 0x0f, 0xba, /4, ib);
pub as bt(_: b32@reg+mem, _: b8@imm) : (double: 0x0f, 0xba, /4, ib);
pub as bt(_: b64@reg+mem, _: b8@imm) : (double: 0x0f, 0xba, /4, ib);

pub as btc(_: b16@reg+mem, _: b16@reg) : (double: 0x0f, 0xbb, /r);
pub as btc(_: b32@reg+mem, _: b32@reg) : (double: 0x0f, 0xbb, /r);
pub as btc(_: b64@reg+mem, _: b64@reg) : (double: 0x0f, 0xbb, /r);
pub as btc(_: b16@reg+mem, _: b8@imm) : (double: 0x0f, 0xba, /7, ib);
pub as btc(_: b32@reg+mem, _: b8@imm) : (double: 0x0f, 0xba, /7, ib);
pub as btc(_: b64@reg+mem, _: b8@imm) : (double: 0x0f, 0xba, /7, ib);

pub as btr(_: b16@reg+mem, _: b16@reg) : (double: 0x0f, 0xb3, /r);
pub as btr(_: b32@reg+mem, _: b32@reg) : (double: 0x0f, 0xb3, /r);
pub as btr(_: b64@reg+mem, _: b64@reg) : (double: 0x0f, 0xb3, /r);
pub as btr(_: b16@reg+mem, _: b8@imm) : (double: 0x0f, 0xba, /6, ib);
pub as btr(_: b32@reg+mem, _: b8@imm) : (double: 0x0f, 0xba, /6, ib);
pub as btr(_: b64@reg+mem, _: b8@imm) : (double: 0x0f, 0xba, /6, ib);

pub as bts(_: b16@reg+mem, _: b16@reg) : (double: 0x0f, 0xab, /r);
pub as bts(_: b32@reg+mem, _: b32@reg) : (double: 0x0f, 0xab, /r);
pub as bts(_: b64@reg+mem, _: b64@reg) : (double: 0x0f, 0xab, /r);
pub as bts(_: b16@reg+mem, _: b8@imm) : (double: 0x0f, 0xba, /5, ib);
pub as bts(_: b32@reg+mem, _: b8@imm) : (double: 0x0f, 0xba, /5, ib);
pub as bts(_: b64@reg+mem, _: b8@imm) : (double: 0x0f, 0xba, /5, ib);

pub as call(_: b16@imm) : (quad: 0xe8, iw);
pub as call(_: b32@imm) : (quad: 0xe8, id);
pub as call(_: b64@reg+mem) : (quad: 0xff, /2);

pub as cdqe() : (double: 0x98);

pub as cqo() : (double: 0x99);

pub as clc() : (double: 0xf8);

pub as cld() : (double: 0xfc);

pub as clflush(_: b8@reg+mem) : (double: 0x0f, 0xae, /7);
pub as clflushopt(_: b8@reg+mem) : (double: 0x66, 0x0f, 0xae, /7);
pub as clzero(_: b64@rax) : (double: 0x0f, 0x01, 0xfc);
pub as cmc() : (double: 0xf5);

pub as cmovo(_: b16@reg, _: b16@reg+mem) : (double: 0x0f, 0x40, /r);
pub as cmovo(_: b32@reg, _: b32@reg+mem) : (double: 0x0f, 0x40, /r);
pub as cmovo(_: b64@reg, _: b64@reg+mem) : (double: 0x0f, 0x40, /r);
pub as cmovno(_: b16@reg, _: b16@reg+mem) : (double: 0x0f, 0x41, /r);
pub as cmovno(_: b32@reg, _: b32@reg+mem) : (double: 0x0f, 0x41, /r);
pub as cmovno(_: b64@reg, _: b64@reg+mem) : (double: 0x0f, 0x41, /r);
pub as cmovb(_: b16@reg, _: b16@reg+mem) : (double: 0x0f, 0x42, /r);
pub as cmovb(_: b32@reg, _: b32@reg+mem) : (double: 0x0f, 0x42, /r);
pub as cmovb(_: b64@reg, _: b64@reg+mem) : (double: 0x0f, 0x42, /r);
pub as cmovc(_: b16@reg, _: b16@reg+mem) : (double: 0x0f, 0x42, /r);
pub as cmovc(_: b32@reg, _: b32@reg+mem) : (double: 0x0f, 0x42, /r);
pub as cmovc(_: b64@reg, _: b64@reg+mem) : (double: 0x0f, 0x42, /r);
pub as cmovnae(_: b16@reg, _: b16@reg+mem) : (double: 0x0f, 0x42, /r);
pub as cmovnae(_: b32@reg, _: b32@reg+mem) : (double: 0x0f, 0x42, /r);
pub as cmovnae(_: b64@reg, _: b64@reg+mem) : (double: 0x0f, 0x42, /r);
pub as cmovnb(_: b16@reg, _: b16@reg+mem) : (double: 0x0f, 0x43, /r);
pub as cmovnb(_: b32@reg, _: b32@reg+mem) : (double: 0x0f, 0x43, /r);
pub as cmovnb(_: b64@reg, _: b64@reg+mem) : (double: 0x0f, 0x43, /r);
pub as cmovnc(_: b16@reg, _: b16@reg+mem) : (double: 0x0f, 0x43, /r);
pub as cmovnc(_: b32@reg, _: b32@reg+mem) : (double: 0x0f, 0x43, /r);
pub as cmovnc(_: b64@reg, _: b64@reg+mem) : (double: 0x0f, 0x43, /r);

pub as cmp(_: b8@rax, _: b8@imm) : (double: 0x3c, ib);
pub as cmp(_: b16@rax, _: b16@imm) : (double: 0x3d, iw);
pub as cmp(_: b32@rax, _: b32@imm) : (double: 0x3d, id);
pub as cmp(_: b64@rax, _: b32@imm) : (double: 0x3d, id);
pub as cmp(_: b16@reg+mem, _: b8@imm) : (double: 0x83, /7, ib);
pub as cmp(_: b32@reg+mem, _: b8@imm) : (double: 0x83, /7, ib);
pub as cmp(_: b64@reg+mem, _: b8@imm) : (double: 0x83, /7, ib);
pub as cmp(_: b8@reg+mem, _: b8@imm) : (double: 0x80, /7, ib);
pub as cmp(_: b16@reg+mem, _: b16@imm) : (double: 0x81, /7, iw);
pub as cmp(_: b32@reg+mem, _: b32@imm) : (double: 0x81, /7, id);
pub as cmp(_: b64@reg+mem, _: b32@imm) : (double: 0x81, /7, id);
pub as cmp(_: b8@reg+mem, _: b8@reg) : (double: 0x38, /r);
pub as cmp(_: b16@reg+mem, _: b16@reg) : (double: 0x39, /r);
pub as cmp(_: b32@reg+mem, _: b32@reg) : (double: 0x39, /r);
pub as cmp(_: b64@reg+mem, _: b64@reg) : (double: 0x39, /r);
pub as cmp(_: b8@reg, _: b8@reg+mem) : (double: 0x3a, /r);
pub as cmp(_: b16@reg, _: b16@reg+mem) : (double: 0x3b, /r);
pub as cmp(_: b32@reg, _: b32@reg+mem) : (double: 0x3b, /r);
pub as cmp(_: b64@reg, _: b64@reg+mem) : (double: 0x3b, /r);

as cmpsb() : (double: 0xa6);
as cmpsw() : (double: 0x66, 0xa7);
as cmpsd() : (double: 0xa7);
as cmpsq() : (double: 0x48, 0xa7);
pub as cmps(_: b8@rdi, _: b8@rsi) { cmpsb(); };
pub as cmps(_: b16@rdi, _: b16@rsi) { cmpsw(); };
pub as cmps(_: b32@rdi, _: b32@rsi) { cmpsd(); };
pub as cmps(_: b64@rdi, _: b64@rsi) { cmpsq(); };

pub as cpuid() : (double: 0x0f, 0xa2);

pub as crc32(_: b32@reg, _: b8@reg+mem) : (double: 0xf2, 0x0f, 0x38, 0xf0, /r);
pub as crc32(_: b32@reg, _: b16@reg+mem) : (double: 0xf2, 0x0f, 0x38, 0xf1, /r);
pub as crc32(_: b32@reg, _: b32@reg+mem) : (double: 0xf2, 0x0f, 0x38, 0xf1, /r);
pub as crc32(_: b64@reg, _: b8@reg+mem) : (double: 0xf2, 0x0f, 0x38, 0xf0, /r);
pub as crc32(_: b64@reg, _: b64@reg+mem) : (double: 0xf2, 0x0f, 0x38, 0xf1, /r);

pub as cmpxchg(_: b8@reg+mem, _: b8@reg) : (double: 0x0f, 0xb0, /r);
pub as cmpxchg(_: b16@reg+mem, _: b16@reg) : (double: 0x0f, 0xb1, /r);
pub as cmpxchg(_: b32@reg+mem, _: b32@reg) : (double: 0x0f, 0xb1, /r);
pub as cmpxchg(_: b64@reg+mem, _: b64@reg) : (double: 0x0f, 0xb1, /r);

pub as dec(_: b8@reg+mem) : (double: 0xfe, /1);
pub as dec(_: b16@reg+mem) : (double: 0xff, /1);
pub as dec(_: b32@reg+mem) : (double: 0xff, /1);
pub as dec(_: b64@reg+mem) : (double: 0xff, /1);
pub as dec(_: b16@reg) : (double: 0x48, rw);
pub as dec(_: b32@reg) : (double: 0x48, rd);

pub as div(target: b8@rax, divisor: b8@reg+mem) : (double: 0xf6, /6);
pub as div(target: b16@rax, target2: b16@rdx, divisor: b16@reg+mem) : (double: 0xf7, /6);
pub as div(target: b32@rax, target2: b32@rdx, divisor: b32@reg+mem) : (double: 0xf7, /6);
pub as div(target: b64@rax, target2: b64@rdx, divisor: b64@reg+mem) : (double: 0xf7, /6);

pub as enter(_: b16@imm, _: b8@imm) : (quad: 0xc8, iw, ib);

pub as idiv(target: b8@rax, divisor: b8@reg+mem) : (double: 0xf6, /7);
pub as idiv(target: b16@rax, target2: b16@rdx, divisor: b16@reg+mem) : (double: 0xf7, /7);
pub as idiv(target: b32@rax, target2: b32@rdx, divisor: b32@reg+mem) : (double: 0xf7, /7);
pub as idiv(target: b64@rax, target2: b64@rdx, divisor: b64@reg+mem) : (double: 0xf7, /7);

pub as imul(_: b8@reg+mem) : (double: 0xf6, /5);
pub as imul(_: b16@reg+mem) : (double: 0xf7, /5);
pub as imul(_: b32@reg+mem) : (double: 0xf7, /5);
pub as imul(_: b64@reg+mem) : (double: 0xf7, /5);
pub as imul(_: b16@reg, _: b16@reg+mem) : (double: 0x0f, 0xaf, /r);
pub as imul(_: b32@reg, _: b32@reg+mem) : (double: 0x0f, 0xaf, /r);
pub as imul(_: b64@reg, _: b64@reg+mem) : (double: 0x0f, 0xaf, /r);
pub as imul(_: b16@reg, _: b16@reg+mem, _: b8@imm) : (double: 0x6b, /r, ib);
pub as imul(_: b32@reg, _: b32@reg+mem, _: b8@imm) : (double: 0x6b, /r, ib);
pub as imul(_: b64@reg, _: b64@reg+mem, _: b8@imm) : (double: 0x6b, /r, ib);
pub as imul(_: b16@reg, _: b16@reg+mem, _: b16@imm) : (double: 0x69, /r, iw);
pub as imul(_: b32@reg, _: b32@reg+mem, _: b32@imm) : (double: 0x69, /r, id);
pub as imul(_: b64@reg, _: b64@reg+mem, _: b32@imm) : (double: 0x69, /r, id);

pub as in(_: b8@rax, _: b8@imm) : (double: 0xe4, ib);
pub as in(_: b32@rax, _: b8@imm) : (double: 0xe5, ib);
pub as in(_: b8@rax, _: b16@rdx) : (double: 0xec);
pub as in(_: b16@rax, _: b16@rdx) : (double: 0xed);
pub as in(_: b32@rax, _: b16@rdx) : (double: 0xed);

pub as inc(_: b8@reg+mem) : (double: 0xfe, /0);
pub as inc(_: b16@reg+mem) : (double: 0xff, /0);
pub as inc(_: b32@reg+mem) : (double: 0xff, /0);
pub as inc(_: b64@reg+mem) : (double: 0xff, /0);
pub as inc(_: b16@reg) : (double: 0x40, rw);
pub as inc(_: b32@reg) : (double: 0x40, rd);

as insb() : (double: 0x6c);
as insw() : (double: 0x66, 0x6d);
as insd() : (double: 0x6d);
pub as ins(_: *i8@rdi, _: i16@rdx) { insb(); };
pub as ins(_: *i16@rdi, _: i16@rdx) { insw(); };
pub as ins(_: *i32@rdi, _: i16@rdx) { insq(); };

pub as int(_: b8@imm) : (double: 0xcd, ib);

pub as jo(_: b8@imm) : (quad: 0x70, ib);
pub as jo(_: b16@imm) : (quad: 0x0f, 0x80, iw);
pub as jo(_: b32@imm) : (quad: 0x0f, 0x80, id);

pub as jno(_: b8@imm) : (quad: 0x71, ib);
pub as jno(_: b16@imm) : (quad: 0x0f, 0x81, iw);
pub as jno(_: b32@imm) : (quad: 0x0f, 0x81, id);

pub as jb(_: b8@imm) : (quad: 0x72, ib);
pub as jb(_: b16@imm) : (quad: 0x0f, 0x82, iw);
pub as jb(_: b32@imm) : (quad: 0x0f, 0x82, id);

pub as jc(_: b8@imm) : (quad: 0x72, ib);
pub as jc(_: b16@imm) : (quad: 0x0f, 0x82, iw);
pub as jc(_: b32@imm) : (quad: 0x0f, 0x82, id);

pub as jnae(_: b8@imm) : (quad: 0x72, ib);
pub as jnae(_: b16@imm) : (quad: 0x0f, 0x82, iw);
pub as jnae(_: b32@imm) : (quad: 0x0f, 0x82, id);

pub as jnb(_: b8@imm) : (quad: 0x73, ib);
pub as jnb(_: b16@imm) : (quad: 0x0f, 0x83, iw);
pub as jnb(_: b32@imm) : (quad: 0x0f, 0x83, id);

pub as jnc(_: b8@imm) : (quad: 0x73, ib);
pub as jnc(_: b16@imm) : (quad: 0x0f, 0x83, iw);
pub as jnc(_: b32@imm) : (quad: 0x0f, 0x83, id);

pub as jae(_: b8@imm) : (quad: 0x73, ib);
pub as jae(_: b16@imm) : (quad: 0x0f, 0x83, iw);
pub as jae(_: b32@imm) : (quad: 0x0f, 0x83, id);

pub as jz(_: b8@imm) : (quad: 0x74, ib);
pub as jz(_: b16@imm) : (quad: 0x0f, 0x84, iw);
pub as jz(_: b32@imm) : (quad: 0x0f, 0x84, id);

pub as je(_: b8@imm) : (quad: 0x74, ib);
pub as je(_: b16@imm) : (quad: 0x0f, 0x84, iw);
pub as je(_: b32@imm) : (quad: 0x0f, 0x84, id);

pub as jnz(_: b8@imm) : (quad: 0x75, ib);
pub as jnz(_: b16@imm) : (quad: 0x0f, 0x85, iw);
pub as jnz(_: b32@imm) : (quad: 0x0f, 0x85, id);

pub as jne(_: b8@imm) : (quad: 0x75, ib);
pub as jne(_: b16@imm) : (quad: 0x0f, 0x85, iw);
pub as jne(_: b32@imm) : (quad: 0x0f, 0x85, id);

pub as jbe(_: b8@imm) : (quad: 0x76, ib);
pub as jbe(_: b16@imm) : (quad: 0x0f, 0x86, iw);
pub as jbe(_: b32@imm) : (quad: 0x0f, 0x86, id);

pub as jna(_: b8@imm) : (quad: 0x76, ib);
pub as jna(_: b16@imm) : (quad: 0x0f, 0x86, iw);
pub as jna(_: b32@imm) : (quad: 0x0f, 0x86, id);

pub as jnbe(_: b8@imm) : (quad: 0x77, ib);
pub as jnbe(_: b16@imm) : (quad: 0x0f, 0x87, iw);
pub as jnbe(_: b32@imm) : (quad: 0x0f, 0x87, id);

pub as ja(_: b8@imm) : (quad: 0x77, ib);
pub as ja(_: b16@imm) : (quad: 0x0f, 0x87, iw);
pub as ja(_: b32@imm) : (quad: 0x0f, 0x87, id);

pub as js(_: b8@imm) : (quad: 0x78, ib);
pub as js(_: b16@imm) : (quad: 0x0f, 0x88, iw);
pub as js(_: b32@imm) : (quad: 0x0f, 0x88, id);

pub as jns(_: b8@imm) : (quad: 0x79, ib);
pub as jns(_: b16@imm) : (quad: 0x0f, 0x89, iw);
pub as jns(_: b32@imm) : (quad: 0x0f, 0x89, id);

pub as jp(_: b8@imm) : (quad: 0x7a, ib);
pub as jp(_: b16@imm) : (quad: 0x0f, 0x8a, iw);
pub as jp(_: b32@imm) : (quad: 0x0f, 0x8a, id);

pub as jpe(_: b8@imm) : (quad: 0x7a, ib);
pub as jpe(_: b16@imm) : (quad: 0x0f, 0x8a, iw);
pub as jpe(_: b32@imm) : (quad: 0x0f, 0x8a, id);

pub as jnp(_: b8@imm) : (quad: 0x7b, ib);
pub as jnp(_: b16@imm) : (quad: 0x0f, 0x8b, iw);
pub as jnp(_: b32@imm) : (quad: 0x0f, 0x8b, id);

pub as jpo(_: b8@imm) : (quad: 0x7b, ib);
pub as jpo(_: b16@imm) : (quad: 0x0f, 0x8b, iw);
pub as jpo(_: b32@imm) : (quad: 0x0f, 0x8b, id);

pub as jl(_: b8@imm) : (quad: 0x7c, ib);
pub as jl(_: b16@imm) : (quad: 0x0f, 0x8c, iw);
pub as jl(_: b32@imm) : (quad: 0x0f, 0x8c, id);

pub as jnge(_: b8@imm) : (quad: 0x7c, ib);
pub as jnge(_: b16@imm) : (quad: 0x0f, 0x8c, iw);
pub as jnge(_: b32@imm) : (quad: 0x0f, 0x8c, id);

pub as jnl(_: b8@imm) : (quad: 0x7d, ib);
pub as jnl(_: b16@imm) : (quad: 0x0f, 0x8d, iw);
pub as jnl(_: b32@imm) : (quad: 0x0f, 0x8d, id);

pub as jge(_: b8@imm) : (quad: 0x7d, ib);
pub as jge(_: b16@imm) : (quad: 0x0f, 0x8d, iw);
pub as jge(_: b32@imm) : (quad: 0x0f, 0x8d, id);

pub as jle(_: b8@imm) : (quad: 0x7e, ib);
pub as jle(_: b16@imm) : (quad: 0x0f, 0x8e, iw);
pub as jle(_: b32@imm) : (quad: 0x0f, 0x8e, id);

pub as jng(_: b8@imm) : (quad: 0x7e, ib);
pub as jng(_: b16@imm) : (quad: 0x0f, 0x8e, iw);
pub as jng(_: b32@imm) : (quad: 0x0f, 0x8e, id);

pub as jnle(_: b8@imm) : (quad: 0x7f, ib);
pub as jnle(_: b16@imm) : (quad: 0x0f, 0x8f, iw);
pub as jnle(_: b32@imm) : (quad: 0x0f, 0x8f, id);

pub as jg(_: b8@imm) : (quad: 0x7f, ib);
pub as jg(_: b16@imm) : (quad: 0x0f, 0x8f, iw);
pub as jg(_: b32@imm) : (quad: 0x0f, 0x8f, id);

pub as jmp(_: b8@imm) : (quad: 0xeb, ib);
pub as jmp(_: b16@imm) : (quad: 0xe9, iw);
pub as jmp(_: b32@imm) : (quad: 0xe9, id);
pub as jmp(_: b64@reg+mem) : (quad: 0xff, /4);

pub as lahf() : (double: 0x9f);

pub as lea(_: *void@reg, _: bin@mem) : (double: 0x8d, /r);

pub as lfence() : (double: 0x0f, 0xae, 0xe8);

as lodsb() : (double: 0xac);
as lodsw() : (double: 0x66, 0xad);
as lodsd() : (double: 0xad);
as lodsq() : (double: 0x48, 0xad);
pub as lods(_: *i8@rsi, _: i8@rax) { lodsb(); };
pub as lods(_: *i16@rsi, _: i16@rax) { lodsw(); };
pub as lods(_: *i32@rsi, _: i32@rax) { lodsb(); };
pub as lods(_: *i64@rsi, _: i64@rax) { lodsq(); };

pub as loop(_: b8@imm) : (quad: 0xe2, 0xcb);
pub as loopne(_: b8@imm) : (quad: 0xe0, 0xcb);
pub as loopnz(_: b8@imm) : (quad: 0xe0, 0xcb);
pub as loopz(_: b8@imm) : (quad: 0xe1, 0xcb);

pub as lzcnt(_: b16@reg, _: b16@reg+mem) : (double: 0xf3, 0x0f, 0xbd, /r);
pub as lzcnt(_: b32@reg, _: b32@reg+mem) : (double: 0xf3, 0x0f, 0xbd, /r);
pub as lzcnt(_: b64@reg, _: b64@reg+mem) : (double: 0xf3, 0x0f, 0xbd, /r);

pub as mcommit() : (double: 0xf3, 0x0f, 0x01, 0xfa);

pub as mfence() : (double: 0x0f, 0xae, 0xf0);

pub as monitorx() : (double: 0x0f, 0x01, 0xfa);

pub as mov(_: b8@reg+mem, _: b8@reg) : (double: 0x88, /r);
pub as mov(_: b16@reg+mem, _: b16@reg) : (double: 0x89, /r);
pub as mov(_: b32@reg+mem, _: b32@reg) : (double: 0x89, /r);
pub as mov(_: b64@reg+mem, _: b64@reg) : (double: 0x89, /r);
pub as mov(_: b8@reg, _: b8@reg+mem) : (double: 0x8a, /r);
pub as mov(_: b16@reg, _: b16@reg+mem) : (double: 0x8b, /r);
pub as mov(_: b32@reg, _: b32@reg+mem) : (double: 0x8b, /r);
pub as mov(_: b64@reg, _: b64@reg+mem) : (double: 0x8b, /r);
pub as mov(_: b8@reg+mem, _: b8@imm) : (double: 0xc6, /0, ib);
pub as mov(_: b16@reg+mem, _: b16@imm) : (double: 0xc7, /0, iw);
pub as mov(_: b32@reg+mem, _: b32@imm) : (double: 0xc7, /0, id);
pub as mov(_: b64@reg+mem, _: b32@imm) : (double: 0xc7, /0, id);
pub as mov(_: b8@reg, _: b8@imm) : (double: 0xb0, rb, ib);
pub as mov(_: b16@reg, _: b16@imm) : (double: 0xb8, rw, iw);
pub as mov(_: b32@reg, _: b32@imm) : (double: 0xb8, rd, id);
pub as mov(_: b64@reg, _: b64@imm) : (double: 0xb8, rq, iq);

pub as movbe(_: b16@reg, _: b16@mem) : (double: 0x0f, 0x38, 0xf0, /r);
pub as movbe(_: b32@reg, _: b32@mem) : (double: 0x0f, 0x38, 0xf0, /r);
pub as movbe(_: b64@reg, _: b64@mem) : (double: 0x0f, 0x38, 0xf0, /r);
pub as movbe(_: b16@mem, _: b16@reg) : (double: 0x0f, 0x38, 0xf1, /r);
pub as movbe(_: b32@mem, _: b32@reg) : (double: 0x0f, 0x38, 0xf1, /r);
pub as movbe(_: b64@mem, _: b64@reg) : (double: 0x0f, 0x38, 0xf1, /r);

pub as movnti(_: b32@mem, _: b32@reg) : (double: 0x0f, 0xc3, /r);
pub as movnti(_: b64@mem, _: b64@reg) : (double: 0x0f, 0xc3, /r);

as movsb() : (double: 0xa4);
as movsw() : (double: 0x66, 0xa5);
as movsd() : (double: 0xa5);
as movsq() : (double: 0x48, 0xa5);
pub as movs(_: *i8@rdi, _: *i8@rsi) { movsb(); };
pub as movs(_: *i16@rdi, _: *i16@rsi) { movsw(); };
pub as movs(_: *i32@rdi, _: *i32@rsi) { movsd(); };
pub as movs(_: *i64@rdi, _: *i64@rsi) { movsq(); };

pub as movsx(_: b16@reg, _: b8@reg+mem) : (double: 0x0f, 0xbe, /r);
pub as movsx(_: b32@reg, _: b8@reg+mem) : (double: 0x0f, 0xbe, /r);
pub as movsx(_: b64@reg, _: b8@reg+mem) : (double: 0x0f, 0xbe, /r);
pub as movsx(_: b32@reg, _: b16@reg+mem) : (double: 0x0f, 0xbf, /r);
pub as movsx(_: b64@reg, _: b16@reg+mem) : (double: 0x0f, 0xbf, /r);

pub as movsxd(_: b64@reg, _: b32@reg+mem) : (double: 0x63, /r);

pub as movzx(_: b16@reg, _: b8@reg+mem) : (double: 0x0f, 0xb6, /r);
pub as movzx(_: b32@reg, _: b8@reg+mem) : (double: 0x0f, 0xb6, /r);
pub as movzx(_: b64@reg, _: b8@reg+mem) : (double: 0x0f, 0xb6, /r);
pub as movzx(_: b32@reg, _: b16@reg+mem) : (double: 0x0f, 0xb7, /r);
pub as movzx(_: b64@reg, _: b16@reg+mem) : (double: 0x0f, 0xb7, /r);

pub as mul(_: b8@reg+mem) : (double: 0xf6, /4);
pub as mul(_: b16@reg+mem) : (double: 0xf7, /4);
pub as mul(_: b32@reg+mem) : (double: 0xf7, /4);
pub as mul(_: b64@reg+mem) : (double: 0xf7, /4);

pub as mwaitx() : (double: 0x0f, 0x01, 0xfb);

pub as neg(_: b8@reg+mem) : (double: 0xf6, /3);
pub as neg(_: b16@reg+mem) : (double: 0xf7, /3);
pub as neg(_: b32@reg+mem) : (double: 0xf7, /3);
pub as neg(_: b64@reg+mem) : (double: 0xf7, /3);

pub as nop() : (double: 0x90);
pub as nop(_: b16@reg+mem) : (double: 0x0f, 0x1f, /0);
pub as nop(_: b32@reg+mem) : (double: 0x0f, 0x1f, /0);
pub as nop(_: b64@reg+mem) : (double: 0x0f, 0x1f, /0);

pub as not(_: b8@reg+mem) : (double: 0xf6, /2);
pub as not(_: b16@reg+mem) : (double: 0xf7, /2);
pub as not(_: b32@reg+mem) : (double: 0xf7, /2);
pub as not(_: b64@reg+mem) : (double: 0xf7, /2);

pub as or(_: b8@rax, _: b8@imm) : (double: 0x0c, ib);
pub as or(_: b16@rax, _: b16@imm) : (double: 0x0d, iw);
pub as or(_: b32@rax, _: b32@imm) : (double: 0x0d, id);
pub as or(_: b64@rax, _: b32@imm) : (double: 0x0d, id);
pub as or(_: b8@reg+mem, _: b8@imm) : (double: 0x80, /1, ib);
pub as or(_: b16@reg+mem, _: b16@imm) : (double: 0x81, /1, iw);
pub as or(_: b32@reg+mem, _: b32@imm) : (double: 0x81, /1, id);
pub as or(_: b64@reg+mem, _: b32@imm) : (double: 0x81, /1, id);
pub as or(_: b16@reg+mem, _: b8@imm) : (double: 0x83, /1, ib);
pub as or(_: b32@reg+mem, _: b8@imm) : (double: 0x83, /1, ib);
pub as or(_: b64@reg+mem, _: b8@imm) : (double: 0x83, /1, ib);
pub as or(_: b8@reg+mem, _: b8@reg) : (double: 0x08, /r);
pub as or(_: b16@reg+mem, _: b16@reg) : (double: 0x09, /r);
pub as or(_: b32@reg+mem, _: b32@reg) : (double: 0x09, /r);
pub as or(_: b64@reg+mem, _: b64@reg) : (double: 0x09, /r);

pub as out(_: b8@imm, _: b8@rax) : (double: 0xe6, ib);
pub as out(_: b8@imm, _: b16@rax) : (double: 0xe7, ib);
pub as out(_: b8@imm, _: b32@rax) : (double: 0xe7, ib);
pub as out(_: b16@rdx, _: b8@rax) : (double: 0xee);
pub as out(_: b16@rdx, _: b16@rax) : (double: 0xef);
pub as out(_: b16@rdx, _: b32@rax) : (double: 0xef);

pub as outsb() : (double: 0x6e);
pub as outsw() : (double: 0x6f);
pub as outsd() : (double: 0x6f);

pub as pause() : (double: 0xf3, 0x90);

pub as pop(_: b64@reg+mem) : (quad: 0x8f, /0);
pub as pop(_: b64@reg) : (quad: 0x58, rq);

pub as popcnt(_: b16@reg, _: b16@reg+mem) : (double: 0xf3, 0x0f, 0xb8, /r);
pub as popcnt(_: b32@reg, _: b32@reg+mem) : (double: 0xf3, 0x0f, 0xb8, /r);
pub as popcnt(_: b64@reg, _: b64@reg+mem) : (double: 0xf3, 0x0f, 0xb8, /r);

pub as popf() : (double: 0x9d);
pub as popfd() : (double: 0x9d);
pub as popfq() : (double: 0x9d);

pub as prefetch(_: b8@mem) : (double: 0x0f, 0x0d, /0);
pub as prefetchw(_: b8@mem) : (double: 0x0f, 0x0d, /1);

pub as prefetchnta(_: b8@mem) : (double: 0x0f, 0x18, /0);
pub as prefetcht0(_: b8@mem) : (double: 0x0f, 0x18, /1);
pub as prefetcht1(_: b8@mem) : (double: 0x0f, 0x18, /2);
pub as prefetcht2(_: b8@mem) : (double: 0x0f, 0x18, /3);

pub as push(_: b64@reg+mem) : (quad: 0xff, /6);
pub as push(_: b64@reg) : (quad: 0x50, rq);
pub as push(_: b64@imm) : (double: 0x68, id);

pub as pushfq() : (quad: 0x9c);

pub as rcl(_: b8@reg+mem, _: b8@imm) : (double: 0xc0, /2, ib);
pub as rcl(_: b16@reg+mem, _: b8@imm) : (double: 0xc1, /2, ib);
pub as rcl(_: b32@reg+mem, _: b8@imm) : (double: 0xc1, /2, ib);
pub as rcl(_: b64@reg+mem, _: b8@imm) : (double: 0xc1, /2, ib);

pub as rcr(_: b8@reg+mem, _: b8@imm) : (double: 0xc0, /3, ib);
pub as rcr(_: b16@reg+mem, _: b8@imm) : (double: 0xc1, /3, ib);
pub as rcr(_: b32@reg+mem, _: b8@imm) : (double: 0xc1, /3, ib);
pub as rcr(_: b64@reg+mem, _: b8@imm) : (double: 0xc1, /3, ib);

as rdrand(_: b16@reg+mem) : (double: 0x0f, 0xc7, /6);
as rdrand(_: b32@reg+mem) : (double: 0x0f, 0xc7, /6);
as rdrand(_: b64@reg+mem) : (double: 0x0f, 0xc7, /6);
pub as rdrand(r: b16@reg) {
    rdrand(r);
};
pub as rdrand(r: b32@reg) {
    rdrand(r);
};
pub as rdrand(r: b64@reg) {
    rdrand(r);
};

as rdseed(_: b16@reg+mem) : (double: 0x0f, 0xc7, /7);
as rdseed(_: b32@reg+mem) : (double: 0x0f, 0xc7, /7);
as rdseed(_: b64@reg+mem) : (double: 0x0f, 0xc7, /7);
pub as rdseed(r: b16@reg) {
    rdseed(r);
};
pub as rdseed(r: b32@reg) {
    rdseer(r);
};
pub as rdseed(r: b64@reg) {
    rdseed(r);
};

pub as ret() : (quad: 0xc3);
pub as ret(_: b16@imm) : (quad: 0xc2, iw);

pub as retf() : (double: 0xcb);
pub as retf(_: b16@imm) : (double: 0xca, iw);

pub as rol(_: b8@reg+mem, _: b8@imm) : (double: 0xc0, /0, ib);
pub as rol(_: b16@reg+mem, _: b8@imm) : (double: 0xc1, /0, ib);
pub as rol(_: b32@reg+mem, _: b8@imm) : (double: 0xc1, /0, ib);
pub as rol(_: b64@reg+mem, _: b8@imm) : (double: 0xc1, /0, ib);

pub as ror(_: b8@reg+mem, _: b8@imm) : (double: 0xc0, /1, ib);
pub as ror(_: b16@reg+mem, _: b8@imm) : (double: 0xc1, /1, ib);
pub as ror(_: b32@reg+mem, _: b8@imm) : (double: 0xc1, /1, ib);
pub as ror(_: b64@reg+mem, _: b8@imm) : (double: 0xc1, /1, ib);

pub as sahf() : (double: 0x9e);

pub as sal(_: b8@reg+mem, _: b8@imm) : (double: 0xc0, /4, ib);
pub as sal(_: b16@reg+mem, _: b8@imm) : (double: 0xc1, /4, ib);
pub as sal(_: b32@reg+mem, _: b8@imm) : (double: 0xc1, /4, ib);
pub as sal(_: b64@reg+mem, _: b8@imm) : (double: 0xc1, /4, ib);

pub as shl(_: b8@reg+mem, _: b8@imm) : (double: 0xc0, /4, ib);
pub as shl(_: b8@reg+mem, _: b8@rcx) : (double: 0xd2, /4);
pub as shl(_: b16@reg+mem, _: b8@imm) : (double: 0xc1, /4, ib);
pub as shl(_: b16@reg+mem, _: b8@rcx) : (double: 0xd3, /4);
pub as shl(_: b32@reg+mem, _: b8@imm) : (double: 0xc1, /4, ib);
pub as shl(_: b32@reg+mem, _: b8@rcx) : (double: 0xd3, /4);
pub as shl(_: b64@reg+mem, _: b8@imm) : (double: 0xc1, /4, ib);
pub as shl(_: b64@reg+mem, _: b8@rcx) : (double: 0xd3, /4);

pub as sar(_: b8@reg+mem, _: b8@imm) : (double: 0xc0, /7, ib);
pub as sar(_: b16@reg+mem, _: b8@imm) : (double: 0xc1, /7, ib);
pub as sar(_: b32@reg+mem, _: b8@imm) : (double: 0xc1, /7, ib);
pub as sar(_: b64@reg+mem, _: b8@imm) : (double: 0xc1, /7, ib);

pub as sbb(_: b8@rax, _: b8@imm) : (double: 0x1c, ib);
pub as sbb(_: b16@rax, _: b16@imm) : (double: 0x1d, iw);
pub as sbb(_: b32@rax, _: b32@imm) : (double: 0x1d, id);
pub as sbb(_: b64@rax, _: b32@imm) : (double: 0x1d, id);
pub as sbb(_: b16@reg+mem, _: b8@imm) : (double: 0x83, /3, ib);
pub as sbb(_: b32@reg+mem, _: b8@imm) : (double: 0x83, /3, ib);
pub as sbb(_: b64@reg+mem, _: b8@imm) : (double: 0x83, /3, ib);
pub as sbb(_: b8@reg+mem, _: b8@imm) : (double: 0x80, /3, ib);
pub as sbb(_: b16@reg+mem, _: b16@imm) : (double: 0x81, /3, iw);
pub as sbb(_: b32@reg+mem, _: b32@imm) : (double: 0x81, /3, id);
pub as sbb(_: b64@reg+mem, _: b32@imm) : (double: 0x81, /3, id);
pub as sbb(_: b8@reg+mem, _: b8@reg) : (double: 0x18, /r);
pub as sbb(_: b16@reg+mem, _: b16@reg) : (double: 0x19, /r);
pub as sbb(_: b32@reg+mem, _: b32@reg) : (double: 0x19, /r);
pub as sbb(_: b64@reg+mem, _: b64@reg) : (double: 0x19, /r);
pub as sbb(_: b8@reg, _: b8@reg+mem) : (double: 0x1a, /r);
pub as sbb(_: b16@reg, _: b16@reg+mem) : (double: 0x1b, /r);
pub as sbb(_: b32@reg, _: b32@reg+mem) : (double: 0x1b, /r);
pub as sbb(_: b64@reg, _: b64@reg+mem) : (double: 0x1b, /r);

as scasb() : (double: 0xae);
as scasw() : (double: 0x66, 0xaf);
as scasd() : (double: 0xaf);
as scasq() : (double: 0x48, 0xaf);
pub as scas(_: *i8@rdi, _: i8@rax) { scasb(); };
pub as scas(_: *i16@rdi, _: i16@rax) { scasw(); };
pub as scas(_: *i32@rdi, _: i32@rax) { scasd(); };
pub as scas(_: *i64@rdi, _: i64@rax) { scasq(); };

pub as seto(_: b8@reg+mem) : (double: 0x0f, 0x90, /0);
pub as setno(_: b8@reg+mem) : (double: 0x0f, 0x91, /0);
pub as setb(_: b8@reg+mem) : (double: 0x0f, 0x92, /0);
pub as setc(_: b8@reg+mem) : (double: 0x0f, 0x92, /0);
pub as setnae(_: b8@reg+mem) : (double: 0x0f, 0x92, /0);
pub as setnb(_: b8@reg+mem) : (double: 0x0f, 0x93, /0);
pub as setnc(_: b8@reg+mem) : (double: 0x0f, 0x93, /0);
pub as setae(_: b8@reg+mem) : (double: 0x0f, 0x93, /0);
pub as setz(_: b8@reg+mem) : (double: 0x0f, 0x94, /0);
pub as sete(_: b8@reg+mem) : (double: 0x0f, 0x94, /0);
pub as setnz(_: b8@reg+mem) : (double: 0x0f, 0x95, /0);
pub as setne(_: b8@reg+mem) : (double: 0x0f, 0x95, /0);
pub as setbe(_: b8@reg+mem) : (double: 0x0f, 0x96, /0);
pub as setna(_: b8@reg+mem) : (double: 0x0f, 0x96, /0);
pub as setnbe(_: b8@reg+mem) : (double: 0x0f, 0x97, /0);
pub as seta(_: b8@reg+mem) : (double: 0x0f, 0x97, /0);
pub as sets(_: b8@reg+mem) : (double: 0x0f, 0x98, /0);
pub as setns(_: b8@reg+mem) : (double: 0x0f, 0x99, /0);
pub as setpe(_: b8@reg+mem) : (double: 0x0f, 0x9a, /0);
pub as setnp(_: b8@reg+mem) : (double: 0x0f, 0x9b, /0);
pub as setpo(_: b8@reg+mem) : (double: 0x0f, 0x9b, /0);
pub as setl(_: b8@reg+mem) : (double: 0x0f, 0x9c, /0);
pub as setnge(_: b8@reg+mem) : (double: 0x0f, 0x9c, /0);
pub as setnl(_: b8@reg+mem) : (double: 0x0f, 0x9d, /0);
pub as setge(_: b8@reg+mem) : (double: 0x0f, 0x9d, /0);
pub as setle(_: b8@reg+mem) : (double: 0x0f, 0x9e, /0);
pub as setng(_: b8@reg+mem) : (double: 0x0f, 0x9e, /0);
pub as setnle(_: b8@reg+mem) : (double: 0x0f, 0x9f, /0);
pub as setg(_: b8@reg+mem) : (double: 0x0f, 0x9f, /0);

pub as sfence() : (double: 0x0f, 0xae, 0xf8);

pub as shld(_: b16@reg+mem, _: b16@reg, _: b8@imm) : (double: 0x0f, 0xa4, /r, ib);
pub as shld(_: b32@reg+mem, _: b32@reg, _: b8@imm) : (double: 0x0f, 0xa4, /r, ib);
pub as shld(_: b64@reg+mem, _: b64@reg, _: b8@imm) : (double: 0x0f, 0xa4, /r, ib);

pub as shr(_: b8@reg+mem, _: b8@imm) : (double: 0xc0, /5, ib);
pub as shr(_: b8@reg+mem, _: b8@rcx) : (double: 0xd2, /5);
pub as shr(_: b16@reg+mem, _: b8@imm) : (double: 0xc1, /5, ib);
pub as shr(_: b16@reg+mem, _: b8@rcx) : (double: 0xd3, /5);
pub as shr(_: b32@reg+mem, _: b8@imm) : (double: 0xc1, /5, ib);
pub as shr(_: b32@reg+mem, _: b8@rcx) : (double: 0xd3, /5);
pub as shr(_: b64@reg+mem, _: b8@imm) : (double: 0xc1, /5, ib);
pub as shr(_: b64@reg+mem, _: b8@rcx) : (double: 0xd3, /5);

pub as shrd(_: b16@reg+mem, _: b16@reg, _: b8@imm) : (double: 0x0f, 0xac, /r, ib);
pub as shrd(_: b32@reg+mem, _: b32@reg, _: b8@imm) : (double: 0x0f, 0xac, /r, ib);
pub as shrd(_: b64@reg+mem, _: b64@reg, _: b8@imm) : (double: 0x0f, 0xac, /r, ib);

pub as stc() : (double: 0xf9);

pub as std() : (double: 0xfd);

as stosb() : (double: 0xaa);
as stosw() : (double: 0x66, 0xab);
as stosd() : (double: 0xab);
as stosq() : (double: 0x48, 0xab);
pub as stos(_: *i8@rdi, _: i8@rax) { stosb(); };
pub as stos(_: *i16@rdi, _: i16@rax) { stosw(); };
pub as stos(_: *i32@rdi, _: i32@rax) { stosd(); };
pub as stos(_: *i64@rdi, _: i64@rax) { stosq(); };

pub as sub(_: b8@rax, _: b8@imm) : (double: 0x2c, ib);
pub as sub(_: b16@rax, _: b16@imm) : (double: 0x2d, iw);
pub as sub(_: b32@rax, _: b32@imm) : (double: 0x2d, id);
pub as sub(_: b64@rax, _: b32@imm) : (double: 0x2d, id);
pub as sub(_: b16@reg+mem, _: b8@imm) : (double: 0x83, /5, ib);
pub as sub(_: b32@reg+mem, _: b8@imm) : (double: 0x83, /5, ib);
pub as sub(_: b64@reg+mem, _: b8@imm) : (double: 0x83, /5, ib);
pub as sub(_: b8@reg+mem, _: b8@imm) : (double: 0x80, /5, ib);
pub as sub(_: b16@reg+mem, _: b16@imm) : (double: 0x81, /5, iw);
pub as sub(_: b32@reg+mem, _: b32@imm) : (double: 0x81, /5, id);
pub as sub(_: b64@reg+mem, _: b32@imm) : (double: 0x81, /5, id);
pub as sub(_: b8@reg+mem, _: b8@reg) : (double: 0x28, /r);
pub as sub(_: b16@reg+mem, _: b16@reg) : (double: 0x29, /r);
pub as sub(_: b32@reg+mem, _: b32@reg) : (double: 0x29, /r);
pub as sub(_: b64@reg+mem, _: b64@reg) : (double: 0x29, /r);
pub as sub(_: b8@reg, _: b8@reg+mem) : (double: 0x2a, /r);
pub as sub(_: b16@reg, _: b16@reg+mem) : (double: 0x2b, /r);
pub as sub(_: b32@reg, _: b32@reg+mem) : (double: 0x2b, /r);
pub as sub(_: b64@reg, _: b64@reg+mem) : (double: 0x2b, /r);

pub as test(_: b8@rax, _: b8@imm) : (double: 0xa8, ib);
pub as test(_: b16@rax, _: b16@imm) : (double: 0xa9, iw);
pub as test(_: b32@rax, _: b32@imm) : (double: 0xa9, id);
pub as test(_: b64@rax, _: b32@imm) : (double: 0xa9, id);
pub as test(_: b8@reg+mem, _: b8@imm) : (double: 0xf6, /0, ib);
pub as test(_: b16@reg+mem, _: b16@imm) : (double: 0xf7, /0, iw);
pub as test(_: b32@reg+mem, _: b32@imm) : (double: 0xf7, /0, id);
pub as test(_: b64@reg+mem, _: b32@imm) : (double: 0xf7, /0, id);
pub as test(_: b8@reg+mem, _: b8@reg) : (double: 0x84, /r);
pub as test(_: b16@reg+mem, _: b16@reg) : (double: 0x85, /r);
pub as test(_: b32@reg+mem, _: b32@reg) : (double: 0x85, /r);
pub as test(_: b64@reg+mem, _: b64@reg) : (double: 0x85, /r);

pub as tzcntreg16(_: b16@reg, _: b16@reg+mem) : (double: 0xf3, 0x0f, 0xbc, /r);
pub as tzcntreg32(_: b32@reg, _: b32@reg+mem) : (double: 0xf3, 0x0f, 0xbc, /r);
pub as tzcntreg64(_: b64@reg, _: b64@reg+mem) : (double: 0xf3, 0x0f, 0xbc, /r);

pub as ud0() : (double: 0x0f, 0xff);
pub as ud1(_: b64@reg+mem, _: b64@reg) : (double: 0x0f, 0xb9, /r);
pub as ud2() : (double: 0x0f, 0x0b);

pub as xadd(_: b8@reg+mem, _: b8@reg) : (double: 0x0f, 0xc0, /r);
pub as xadd(_: b16@reg+mem, _: b16@reg) : (double: 0x0f, 0xc1, /r);
pub as xadd(_: b32@reg+mem, _: b32@reg) : (double: 0x0f, 0xc1, /r);
pub as xadd(_: b64@reg+mem, _: b64@reg) : (double: 0x0f, 0xc1, /r);

pub as xchg(_: b16@rax, _: b16@reg) : (double: 0x90, rw);
pub as xchg(_: b16@reg, _: b16@rax) : (double: 0x90, rw);
pub as xchg(_: b32@rax, _: b32@reg) : (double: 0x90, rd);
pub as xchg(_: b32@reg, _: b32@rax) : (double: 0x90, rd);
pub as xchg(_: b64@rax, _: b64@reg) : (double: 0x90, rq);
pub as xchg(_: b64@reg, _: b64@rax) : (double: 0x90, rq);
pub as xchg(_: b8@reg+mem, _: b8@reg) : (double: 0x86, /r);
pub as xchg(_: b8@reg, _: b8@reg+mem) : (double: 0x86, /r);
pub as xchg(_: b16@reg+mem, _: b16@reg) : (double: 0x87, /r);
pub as xchg(_: b16@reg, _: b16@reg+mem) : (double: 0x87, /r);
pub as xchg(_: b32@reg+mem, _: b32@reg) : (double: 0x87, /r);
pub as xchg(_: b32@reg, _: b32@reg+mem) : (double: 0x87, /r);
pub as xchg(_: b64@reg+mem, _: b64@reg) : (double: 0x87, /r);
pub as xchg(_: b64@reg, _: b64@reg+mem) : (double: 0x87, /r);

pub as xlatb() : (double: 0xd7);

pub as xor(_: b8@rax, _: b8@imm) : (double: 0x34, ib);
pub as xor(_: b16@rax, _: b16@imm) : (double: 0x35, iw);
pub as xor(_: b32@rax, _: b32@imm) : (double: 0x35, id);
pub as xor(_: b64@rax, _: b32@imm) : (double: 0x35, id);
pub as xor(_: b8@reg+mem, _: b8@imm) : (double: 0x80, /6, ib);
pub as xor(_: b16@reg+mem, _: b16@imm) : (double: 0x81, /6, iw);
pub as xor(_: b32@reg+mem, _: b32@imm) : (double: 0x81, /6, id);
pub as xor(_: b64@reg+mem, _: b32@imm) : (double: 0x81, /6, id);
pub as xor(_: b16@reg+mem, _: b8@imm) : (double: 0x83, /6, ib);
pub as xor(_: b32@reg+mem, _: b8@imm) : (double: 0x83, /6, ib);
pub as xor(_: b64@reg+mem, _: b8@imm) : (double: 0x83, /6, ib);
pub as xor(_: b8@reg+mem, _: b8@reg) : (double: 0x30, /r);
pub as xor(_: b16@reg+mem, _: b16@reg) : (double: 0x31, /r);
pub as xor(_: b32@reg+mem, _: b32@reg) : (double: 0x31, /r);
pub as xor(_: b64@reg+mem, _: b64@reg) : (double: 0x31, /r);
pub as xor(_: b8@reg, _: b8@reg+mem) : (double: 0x32, /r);
pub as xor(_: b16@reg, _: b16@reg+mem) : (double: 0x33, /r);
pub as xor(_: b32@reg, _: b32@reg+mem) : (double: 0x33, /r);
pub as xor(_: b64@reg, _: b64@reg+mem) : (double: 0x33, /r);

pub as endbr64() : (double: 0xf3, 0x0f, 0x1e, 0xfa);
pub as syscall() : (double: 0x0f, 0x05);

as rep() : (double: 0xf3);
pub as rep(_: i64@rcx) {
    rep();
};
as repne() : (double: 0xf2);
pub as repne(_: i64@rcx) {
    repne();
};

