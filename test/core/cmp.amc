import core;

pub as eq(flag: bool@reg+mem, left: b64@reg+mem+imm, right: b64@reg+mem+imm) {
    cmp(left, right);
    sete(flag);
};

pub as neq(flag: bool@reg+mem, left: b64@reg+mem+imm, right: b64@reg+mem+imm) {
    cmp(left, right);
    setne(flag);
};

pub as lt(flag: bool@reg+mem, left: b64@reg+mem+imm, right: b64@reg+mem+imm) {
    cmp(left, right);
    setl(flag);
};

pub as le(flag: bool@reg+mem, left: b64@reg+mem+imm, right: b64@reg+mem+imm) {
    cmp(left, right);
    setle(flag);
};

pub as ge(flag: bool@reg+mem, left: b64@reg+mem+imm, right: b64@reg+mem+imm) {
    cmp(left, right);
    setge(flag);
};

pub as gt(flag: bool@reg+mem, left: b64@reg, right: b64@reg+mem+imm) {
    cmp(left, right);
    setnle(flag);
};

pub as gt(flag: bool@reg+mem, left: b64@mem+imm, right: b64@reg+mem+imm) {
    let left_copy: i64@r8 = left;
    flag.gt(left_copy, right);
};

pub as max(inout self: b64@reg+mem, out other: b64@reg+mem+imm) {
    let flag: bool@r8;
    if(flag.lt(self, other)) {
        self = other;
    };
};

pub as min(inout self: b64@reg+mem, out other: b64@reg+mem+imm) {
    let flag: bool@r8;
    if(flag.gt(self. other)) {
        self = other;
    };
};

