import core;

pub template RawVec(T, A) {
    impl Slice($(T));

    pub struct Vec_$(T) {
        slice: Slice_$(T),
        capacity: u64,
    };

    pub as new(out self: Vec_$(T)@mem) {
        self.slice.empty();
        self.capacity = 0;
    };

    pub as mov(out dst: Vec_$(T)@mem, inout src: Vec_$(T)@mem) {
        dst.slice = src.slice;
        dst.capacity = src.capacity;
        src.slice.empty();
        src.capacity = 0;
    };

    pub as push(inout self: Vec_$(T)@mem, in value: $(T)@reg+mem+imm) {
        let self_len: u64@auto;
        self.slice.len(self_len);

        let new_capacity: u64@auto = self_len;
        new_capacity += 1;
        self.reserve(new_capacity);

        let self_addr: *$(T)@auto;
        self.slice.as_addr(self_addr);

        let value_index: u64@auto = self_len;
        self_len += 1;
        self.slice.from(self_addr, self_len);

        let addr: *$(T)@auto;
        self.slice.index(value_index, addr);
        *addr = value;
    };

    pub as pop(inout self: Vec_$(T)@mem, out value: $(T)@reg+mem) {
        let self_len: u64@auto;
        self.slice.len(self_len);

        let last_index: u64@auto = self_len;
        last_index -= 1;

        let value_addr: *$(T)@auto;
        self.slice.index(last_index, value_addr);
        value = *value_addr;

        let addr: *$(T)@auto;
        self.slice.as_addr(addr);

        self_len -= 1;

        self.slice.from(addr, self_len);
    };

    pub as index(in self: Vec_$(T)@mem, in index: u64@reg+mem+imm, out addr: *$(T)@reg+mem) {
        self.slice.index(index, addr);
    };

    pub as clone(in self: Vec_$(T)@mem, out buff: Vec_$(T)@mem) {
        let self_len: u64@auto;
        self.slice.len(self_len);

        buff.new();
        buff.reserve(self_len);

        let memcpy_dst: *void@auto;
        buff.as_addr(memcpy_dst);
        let memcpy_src: *void@auto;
        self.as_addr(memcpy_src);
        let memcpy_size: u64@auto = self_len;
        memcpy_size.imul(sizeof($(T)));
        memcpy(memcpy_dst, memcpy_src, memcpy_size);

        buff.slice.from(memcpy_dst, self_len);
    };

    pub as as_addr(in self: Vec_$(T)@mem, out addr: *$(T)@reg+mem) {
        self.slice.as_addr(addr);
    };

    pub as len(in self: Vec_$(T)@mem, out len: u64@reg+mem) {
        self.slice.len(len);
    };

    pub as capacity(in self: Vec_$(T)@mem, out capacity: u64@reg+mem) {
        capacity = self.capacity;
    };

    pub as resize(inout self: Vec_$(T)@mem, in len: u64@reg+mem+imm) {
        let addr: *$(T)@auto;

        self.reserve(len);
        self.as_addr(addr);
        self.slice.from(addr, len);
    };

    pub as reserve(inout self: Vec_$(T)@mem, in capacity: u64@reg+mem+imm) {
        let flag: bool@auto;

        if(flag.gt(capacity, self.capacity)) {
            let self_len: u64@auto;
            self.slice.len(self_len);

            let new_capacity: u64@auto = self.capacity;
            if(flag.eq(new_capacity, 0)) {
                new_capacity = 4;
            }else {
                new_capacity += new_capacity;
            };
            
            new_capacity.max(capacity);

            let new_memsize: u64@auto = new_capacity;
            new_memsize.imul(sizeof($(T)));

            let new_addr_u8: *u8@auto;
            $(A).alloc(new_memsize, new_addr_u8);

            let old_memsize: u64@auto;
            self.slice.len(old_memsize);
            old_memsize.imul(sizeof($(T)));
            
            let old_addr: *void@auto;
            self.slice.as_addr(old_addr);
            
            memcpy(new_addr_u8, old_addr, old_memsize);

            $(A).dealloc(old_addr);

            let new_addr: *$(T)@auto = new_addr_u8;
            self.slice.from(new_addr, self_len);
            self.capacity = new_capacity;
        }
    };

    pub as eq(out flag: bool@reg+mem, in left: Vec_$(T)@mem, in right: Vec_$(T)@mem) {
        flag.eq(left.slice, right.slice);
    };

    pub as drop(inout self: Vec_$(T)@mem) {
        let debug_str: Str@stack;
        let self_len: u64@auto;
        self.slice.len(self_len);

        let object_addr: *$(T)@auto;
        
        for((let i: u64@auto = 0; let flag: bool@auto); flag.lt(i, self_len); ++i) {
           self.slice.index(i, object_addr);
           (*object_addr).drop();
        };

        let slice_addr: *$(T)@auto;
        self.slice.as_addr(slice_addr);
        $(A).dealloc(slice_addr);
    };
};

pub template Vec_transmute(D, S) {
    pub as transmute(in src: Vec_$(S)@mem, out dst: Vec_$(D)@mem) {
        panic_neq(sizeof($(D)), sizeof($(S)), "cannot transmute between different size type");

        let slice_addr_s: *$(S)@auto;
        src.slice.as_addr(slice_addr_s);
        let slice_addr_d: *$(D)@auto = slice_addr_s;
        let slice_len: u64@auto;
        src.slice.len(slice_len);

        dst.slice.from(slice_addr_d, slice_len);
        dst.capacity = src.capacity;

        src.slice.empty();
        src.capacity = 0;
    };
};

pub template Display_Vec(Formatter, T) {
    pub as display(inout self: $(Formatter)@mem, in vec: Vec_$(T)@mem) {
        let str: Str@stack;
        str.from("Vec[");
        self.write(str);
        str.from(", ");

        let len: u64@auto;
        vec.slice.len(len);

        let flag: bool@auto;
        for(let i: u64@auto = 0; flag.lt(i, len); ++i) {
            if(flag.neq(i, 0)) {
                self.write(str);
            };

            let object: *$(T)@auto;
            vec.index(i, object);
            self.display(*object);
        };

        str.from("]");
        self.write(str);
    };
};

