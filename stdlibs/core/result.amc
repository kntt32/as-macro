import core;

pub enum Result {
    Ok, Error
};

pub template Result(T, E) {
    pub struct Result_$(T)_$(E) {
        result: Result,
        body: union {
            ok: $(T),
            error: $(E),
        },
    };

    pub as ok(out self: Result_$(T)_$(E)@mem, in ok: $(T)@reg+mem+imm) {
        self.result = Result.Ok;
        self.body.ok = ok;
    };

    pub as error(out self: Result_$(T)_$(E)@mem, in error: $(T)@reg+mem+imm) {
        self.result = Result.Error;
        self.body.error = error;
    };

    pub as take_ok(self: Result_$(T)_$(E)@mem, out ok: $(T)@reg+mem) {
        panic_neq(self.result, Result.Ok, "failed to take from result.ok");
        ok = self.body.ok;
    };

    pub as take_error(self: Result_$(T)_$(E)@mem, out error: $(T)@reg+mem) {
        panic_neq(self.result, Result.Error, "failed to take from result.error");
        error = self.body.error;
    };

    pub as clone(out dst: Result_$(T)_$(E)@mem, in src: Result_$(T)_$(E)@mem+imm) {
        dst.result = src.result;
        
        switch(dst.result) {
            Result.Ok {
                src.body.ok.clone(dst.body.ok);
            };
            Result.Error {
                src.body.error.clone(dst.body.error);
            };
        };
    };

    pub as mov(out dst: Result_$(T)_$(E)@mem, in src: Result_$(T)_$(E)@mem+imm) {
        dst.result = src.result;
        
        switch(dst.result) {
            Result.Ok {
                dst.body.ok = src.body.ok;
            };
            Result.Error {
                dst.body.error = src.body.error;
            };
        };
    };

    pub as drop(inout self: Result_$(T)_$(E)@mem) {
        switch(self.result) {
            Result.Ok {
                self.body.ok.drop();
            };
            Result.Error {
                self.body.error.drop();
            };
        };
    };
};

