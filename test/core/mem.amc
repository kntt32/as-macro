import core;

pub as memcpy(in dst: *i8@rdi, in src: *i8@rsi, in size: i64@rcx) {
    let dst_store: i64@r13 = dst;
    let src_store: i64@r14 = src;
    let size_store: i64@r15 = size;

    cld();

    rep(size);
    movs(dst, src);

    size = size_store;
    src = src_store;
    dst = dst_store;
};

pub as memmove(in dst: *i8@rdi, in src: *i8@rsi, in size: i64@rcx) {
    let flag: bool@rax;
    let dst_store: i64@r8 = dst;
    let src_store: i64@r9 = src;
    let size_store: i64@r10 = size;

    if(flag.lt(dst, src)) {
        std();

        dst += size;
        dst -= 1;
        src += size;
        src -= 1;

        rep(size);
        movs(dst, src);

        cld();
    }else {
        cld();

        rep(size);
        movs(dst, src);
    };

    size = size_store;
    src = src_store;
    dst = dst_store;
};

pub as memset(in dst: *i8@rdi, in value: i8@rax, in size: i64@rcx) {
    let dst_store: i64@r8 = dst;
    let size_store: i64@r9 = size;

    cld();

    rep(size);
    stos(dst, value);

    size = size_store;
    dst = dst_store;
};

pub as strlen(in s: *char@rsi, out len: i64@rcx) {
    let seek_ptr: *i8@rdi;
    seek_ptr = s;

    let null_code: i8@rax;
    null_code = '\0';
    len = -1;

    cld();
    repne(rcx);
    scas(seek_ptr, null_code);
    
    len = seek_ptr;
    sub(len, s);
    dec(len);
};

