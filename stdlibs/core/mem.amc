import core;

pub as memcpy(in dst: *void@reg+mem, in src: *void@reg+mem, in size: u64@reg+mem+imm) {
    let dst_auto: *u8@auto = dst;
    let src_auto: *u8@auto = src;
    let size_auto: *u8@auto = size;

    {
        let dst_rdi: *u8@rdi = dst_auto;
        let src_rsi: *u8@rsi = src_auto;
        let size_rcx: u64@rcx = size_auto;
        
        cld();

        rep(size_rcx);
        movs(dst_rdi, src_rsi);
    };
};

pub as memmove(in dst: *void@reg+mem, in src: *void@reg+mem, in size: u64@reg+mem+imm) {
    let dst_auto: *u8@auto = dst;
    let src_auto: *u8@auto = src;
    let size_auto: *u8@auto = size;
    
    {
        let flag: bool@auto;
        let dst_rdi: *u8@rdi = dst_auto;
        let src_rsi: *u8@rsi = src_auto;
        let size_rcx: u64@rcx = size_auto;

        if(flag.lt(dst, src)) {
            std();

            dst += size;
            dst -= 1;
            src += size;
            src -= 1;

            rep(size_rcx);
            movs(dst_rdi, src_rsi);

            cld();
        }else {
            cld();

            rep(size_rcx);
            movs(dst_rdi, src_rsi);
        };
    };
};

pub as memset(in dst: *void@reg+mem, in value: u8@reg+mem+imm, in size: u64@reg+mem+imm) {
    let dst_auto: *u8@auto = dst;
    let value_auto: u8@auto = value;
    let size_auto: u64@auto = size;

    {
        let dst_rdi: *u8@rdi = dst_auto;
        let value_rax: u8@rax = value_auto;
        let size_rcx: u64@rcx = size_auto;
        
        cld();

        rep(size_rcx);
        stos(dst_rdi, value_rax);
    };
};

pub as memcmp(out flag: bool@reg+mem, in left: *void@reg+mem+imm, in right: *void@reg+mem+imm, in len: u64@reg+mem+imm) {
    let left_auto: *u8@auto = left;
    let right_auto: *u8@auto = right;
    let len_auto: u64@auto = len;
    let flag_auto: bool@auto;

    {
        let left_rdi: *u8@rdi = left_auto;
        let right_rsi: *u8@rsi = right_auto;
        let len_rcx: u64@rcx = len_auto;

        cld();
        repe(len_rcx);
        cmps(left_rdi, right_rsi);

        flag_auto.eq(len_rcx, 0);
    };

    flag = flag_auto;
};

pub as strlen(in s: *char@rsi, out len: u64@rcx) {
    let seek_ptr: *u8@rdi;
    seek_ptr = s;

    let null_code: u8@rax;
    null_code = '\0';
    len = -1;

    cld();
    repne(len);
    scas(seek_ptr, null_code);
    
    len = seek_ptr;
    sub(len, s);
    dec(len);
};

pub as strlen(in s: *char@reg+mem, out len: u64@reg+mem) {
    let s_auto: *char@auto = s;
    let len_auto: u64@auto;
    {
        let s_rsi: *char@rsi = s_auto;
        let len_rcx: u64@rcx;

        strlen(s_rsi, len_rcx);

        len_auto = len_rcx;
    };

    len = len_auto;
};

