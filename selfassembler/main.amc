import std;
import std.io;
import gen;
import global_syntax;
import register;
import type;

impl Display_GlobalSyntaxTree(Out);
impl Display_Register(Out);

struct MyStruct {
    x: u64,
    str: [char; 10],
};

impl Display_Type(Out);
impl Display_Error(Out);

fn main() {
    let parser: Parser@stack;
    let path: Str@stack;
    let src: Str@stack;
    parser.new(src.from("struct MyStruct { x:i64, y: i64 }"), path.empty());
    let exist: bool@auto;
    let type: Type@stack;
    let partial_types: Vec_PartialType@stack;
    partial_types.new();
    let error: Error@stack;

    do(exist) {
        let partial_type: defer PartialType@stack;
        parser.parse(partial_type, exist);
        panic_eq(exist, false, "PANIC:33");
        printfln(partial_type);
        try type.from(partial_type, partial_types, error, exist);
        printfln(type);
        type.drop();
    }catch {
        printfln(error);
        error.drop();
    };
/*
    let src: Str@stack;
    src.from("
    pub struct Point { x: u32, y: u32 };
    pub enum MyEnum { A, B};");
    let path: Str@stack;
    path.empty();
    let parser: Parser@stack;
    parser.new(src, path);


    let exist: bool@auto;
    let flag: bool@auto;
    do(exist) {
        let tree: defer GlobalSyntaxTree@stack;
        parser.parse(tree);
        printfln(tree);
    }catch {
        println("catch");
    };*/
};

