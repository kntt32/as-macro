import core;

template CmpSignedRmRi(T) {
    pub as eq(flag: bool@reg+mem, left: $(T)@reg+mem, right: $(T)@reg+imm) {
        cmp(left, right);
        sete(flag);
    };

    pub as neq(flag: bool@reg+mem, left: $(T)@reg+mem, right: $(T)@reg+imm) {
        cmp(left, right);
        setne(flag);
    };

    pub as lt(flag: bool@reg+mem, left: $(T)@reg+mem, right: $(T)@reg+imm) {
        cmp(left, right);
        setl(flag);
    };

    pub as le(flag: bool@reg+mem, left: $(T)@reg+mem, right: $(T)@reg+imm) {
        cmp(left, right);
        setle(flag);
    };

    pub as gt(flag: bool@reg+mem, left: $(T)@reg+mem, right: $(T)@reg+imm) {
        cmp(left, right);
        setg(flag);
    };

    pub as ge(flag: bool@reg+mem, left: $(T)@reg+mem, right: $(T)@reg+imm) {
        cmp(left, right);
        setge(flag);
    };
};

impl CmpSignedRmRi(i8);
impl CmpSignedRmRi(i16);
impl CmpSignedRmRi(i32);
impl CmpSignedRmRi(i64);

template CmpUnsignedRmRi(T) {
    pub as eq(flag: bool@reg+mem, left: $(T)@reg+mem, right: $(T)@reg+imm) {
        cmp(left, right);
        sete(flag);
    };

    pub as neq(flag: bool@reg+mem, left: $(T)@reg+mem, right: $(T)@reg+imm) {
        cmp(left, right);
        setne(flag);
    };

    pub as lt(flag: bool@reg+mem, left: $(T)@reg+mem, right: $(T)@reg+imm) {
        cmp(left, right);
        setb(flag);
    };

    pub as le(flag: bool@reg+mem, left: $(T)@reg+mem, right: $(T)@reg+imm) {
        cmp(left, right);
        setbe(flag);
    };

    pub as gt(flag: bool@reg+mem, left: $(T)@reg+mem, right: $(T)@reg+imm) {
        cmp(left, right);
        seta(flag);
    };

    pub as ge(flag: bool@reg+mem, left: $(T)@reg+mem, right: $(T)@reg+imm) {
        cmp(left, right);
        setae(flag);
    };
};

impl CmpUnsignedRmRi(b8);
impl CmpUnsignedRmRi(b16);
impl CmpUnsignedRmRi(b32);
impl CmpUnsignedRmRi(b64);

pub template CmpSignedRM(T) {
    pub as eq(flag: bool@reg+mem, left: $(T)@reg, right: $(T)@mem) {
        cmp(left, right);
        sete(flag);
    };

    pub as neq(flag: bool@reg+mem, left: $(T)@reg, right: $(T)@mem) {
        cmp(left, right);
        setne(flag);
    };

    pub as lt(flag: bool@reg+mem, left: $(T)@reg, right: $(T)@mem) {
        cmp(left, right);
        setl(flag);
    };

    pub as le(flag: bool@reg+mem, left: $(T)@reg, right: $(T)@mem) {
        cmp(left, right);
        setle(flag);
    };

    pub as gt(flag: bool@reg+mem, left: $(T)@reg, right: $(T)@mem) {
        cmp(left, right);
        setg(flag);
    };

    pub as ge(flag: bool@reg+mem, left: $(T)@reg, right: $(T)@mem) {
        cmp(left, right);
        setge(flag);
    };
};

impl CmpSignedRM(i8);
impl CmpSignedRM(i16);
impl CmpSignedRM(i32);
impl CmpSignedRM(i64);

pub template CmpUnsigneRM(T) {
    pub as eq(flag: bool@reg+mem, left: $(T)@reg, right: $(T)@mem) {
        cmp(left, right);
        sete(flag);
    };

    pub as neq(flag: bool@reg+mem, left: $(T)@reg, right: $(T)@mem) {
        cmp(left, right);
        setne(flag);
    };

    pub as lt(flag: bool@reg+mem, left: $(T)@reg, right: $(T)@mem) {
        cmp(left, right);
        setb(flag);
    };

    pub as le(flag: bool@reg+mem, left: $(T)@reg, right: $(T)@mem) {
        cmp(left, right);
        setbe(flag);
    };

    pub as gt(flag: bool@reg+mem, left: $(T)@reg, right: $(T)@mem) {
        cmp(left, right);
        seta(flag);
    };

    pub as ge(flag: bool@reg+mem, left: $(T)@reg, right: $(T)@mem) {
        cmp(left, right);
        setae(flag);
    };
};

impl CmpUnsigneRM(b8);
impl CmpUnsigneRM(b16);
impl CmpUnsigneRM(b32);
impl CmpUnsigneRM(b64);

pub template CmpSignedMiMi(T) {
    pub as eq(flag: bool@reg+mem, left: $(T)@mem+imm, right: $(T)@mem+imm) {
        let left_reg: $(T)@auto = left;
        let right_reg: $(T)@auto = right;

        cmp(left_reg, right_reg);
        sete(flag);
    };

    pub as neq(flag: bool@reg+mem, left: $(T)@mem+imm, right: $(T)@mem+imm) {
        let left_reg: $(T)@auto = left;
        let right_reg: $(T)@auto = right;

        cmp(left_reg, right_reg);
        setne(flag);
    };

    pub as lt(flag: bool@reg+mem, left: $(T)@mem+imm, right: $(T)@mem+imm) {
        let left_reg: $(T)@auto = left;
        let right_reg: $(T)@auto = right;

        cmp(left_reg, right_reg);
        setl(flag);
    };

    pub as le(flag: bool@reg+mem, left: $(T)@mem+imm, right: $(T)@mem+imm) {
        let left_reg: $(T)@auto = left;
        let right_reg: $(T)@auto = right;

        cmp(left_reg, right_reg);
        setle(flag);
    };

    pub as gt(flag: bool@reg+mem, left: $(T)@mem+imm, right: $(T)@mem+imm) {
        let left_reg: $(T)@auto = left;
        let right_reg: $(T)@auto = right;

        cmp(left_reg, right_reg);
        setg(flag);
    };

    pub as ge(flag: bool@reg+mem, left: $(T)@mem+imm, right: $(T)@mem+imm) {
        let left_reg: $(T)@auto = left;
        let right_reg: $(T)@auto = right;

        cmp(left_reg, right_reg);
        setge(flag);
    };
};

impl CmpSignedMiMi(i8);
impl CmpSignedMiMi(i16);
impl CmpSignedMiMi(i32);
impl CmpSignedMiMi(i64);

pub template CmpUnsignedMiMi(T) {
    pub as eq(flag: bool@reg+mem, left: $(T)@mem+imm, right: $(T)@mem+imm) {
        let left_reg: $(T)@auto = left;
        let right_reg: $(T)@auto = right;

        cmp(left_reg, right_reg);
        sete(flag);
    };

    pub as neq(flag: bool@reg+mem, left: $(T)@mem+imm, right: $(T)@mem+imm) {
        let left_reg: $(T)@auto = left;
        let right_reg: $(T)@auto = right;

        cmp(left_reg, right_reg);
        setne(flag);
    };
    
    pub as lt(flag: bool@reg+mem, left: $(T)@mem+imm, right: $(T)@mem+imm) {
        let left_reg: $(T)@auto = left;
        let right_reg: $(T)@auto = right;

        cmp(left_reg, right_reg);
        setb(flag);
    };

    pub as le(flag: bool@reg+mem, left: $(T)@mem+imm, right: $(T)@mem+imm) {
        let left_reg: $(T)@auto = left;
        let right_reg: $(T)@auto = right;

        cmp(left_reg, right_reg);
        setbe(flag);
    };

    pub as gt(flag: bool@reg+mem, left: $(T)@mem+imm, right: $(T)@mem+imm) {
        let left_reg: $(T)@auto = left;
        let right_reg: $(T)@auto = right;

        cmp(left_reg, right_reg);
        seta(flag);
    };

    pub as ge(flag: bool@reg+mem, left: $(T)@mem+imm, right: $(T)@mem+imm) {
        let left_reg: $(T)@auto = left;
        let right_reg: $(T)@auto = right;

        cmp(left_reg, right_reg);
        setae(flag);
    };
};

impl CmpUnsignedMiMi(b8);
impl CmpUnsignedMiMi(b16);
impl CmpUnsignedMiMi(b32);
impl CmpUnsignedMiMi(b64);

pub template Max(T) {
    pub as max(inout self: $(T)@reg+mem+imm, in other: $(T)@reg+mem+imm) {
        let flag: bool@auto;
        if(flag.lt(self, other)) {
            self = other;
        };
    };
};

impl Max(b8);
impl Max(b16);
impl Max(b32);
impl Max(b64);

pub template Min(T) {
    pub as min(inout self: $(T)@reg+mem+imm, in other: $(T)@reg+mem+imm) {
        let flag: bool@auto;
        if(flag.gt(self, other)) {
            self = other;
        };
    };
};

impl Min(b8);
impl Min(b16);
impl Min(b32);
impl Min(b64);

