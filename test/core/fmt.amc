import core;
import cmp;
import slice;
import str;
import option;

pub template Display(Formatter) {
    pub as display(inout self: $(Formatter)@mem, in object: Str@mem) {
        self.write(object);
    };

    pub as display(inout self: $(Formatter)@mem, in object: i64@reg+mem+imm) {
        !DEBUG_OBJECT_AUTO;
        let object_auto: i64@auto = object;
        let str: Str@stack;
        let flag: bool@auto;

        if(flag.lt(object_auto, 0)) {
            str.from("-");
            self.write(str);
            object_auto.neg();
        };

        if(flag.eq(object_auto, 0)) {
            str.from("0");
            self.write(str);
        }else {
            let buffer: [char; 32]@stack;
            buffer[31] = '\0';
            let buffer_index: i64@auto = 31;
            let buffer_ptr: *char@auto;
        
            let remainder: i64@auto;
            let divisor: i64@auto = 10;
        
            while(flag.neq(object_auto, 0)) {
                remainder = 0;
                object_auto.idiv(remainder, 10);
                let remainder_i8: i8@auto = remainder;

                buffer_index -= 1;
                buffer_ptr =& buffer;
                buffer_ptr += buffer_index;
                *buffer_ptr = '0';
                !DEBUG;
                *buffer_ptr += remainder_i8;
            };

            buffer_ptr =& buffer;
            buffer_ptr += buffer_index;
            
            str.from(buffer_ptr);
            self.write(str);
        }
    };

    pub as display(inout self: $(Formatter)@mem, in object: i32@reg+mem+imm) {
        let i64_object: i64@auto = object;
        self.display(i64_object);
    };
};

