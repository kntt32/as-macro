import core;
import panic;

pub template Slice(T) {
    pub struct Slice_$(T) {
        ptr: *$(T),
        len: u64,
    };

    pub as eq(out flag: bool@reg+mem, in left: Slice_$(T)@mem, in right: Slice_$(T)@mem) {
        if(flag.eq(left.len, right.len)) {
            let break_flag: bool@auto = true;

            for(let i: u64@auto = 0; flag.lt(i, left.len).and(break_flag); ++i) {
                let left_addr: *$(T)@auto;
                let right_addr: *$(T)@auto;
                left.index(i, left_addr);
                right.index(i, right_addr);

                if(flag.eq(*left_addr, *right_addr).not()) {
                    break_flag = false;
                };
                flag.not();
            };

            flag = break_flag;
        };
    };

    pub as mov(out dst: Slice_$(T)@mem, out src: Slice_$(T)@mem) {
        dst.ptr = src.ptr;
        dst.len = src.len;
    };

    pub as from(out self: Slice_$(T)@mem, in ptr: *$(T)@reg+mem, in len: u64@reg+mem+imm) {
        self.ptr = ptr;
        self.len = len;
    };

    pub as empty(out self: Slice_$(T)@mem) {
        self.ptr = null;
        self.len = 0;
    };
    
    pub as index(in self: Slice_$(T)@mem, in index: u64@reg+mem+imm, out ptr: *$(T)@reg+mem) {
        panic_ge(index, self.len, "Slice:index: out of range");
        let ptr_auto: *$(T)@auto = sizeof($(T));
        ptr_auto.imul(index);
        ptr_auto += self.ptr;
        ptr = ptr_auto;
    };

    pub as len(in self: Slice_$(T)@mem, out len: u64@reg+mem) {
        len = self.len;
    };

    pub as as_ptr(in self: Slice_$(T)@mem, out ptr: *$(T)@reg+mem) {
        ptr = self.ptr;
    };

    pub as slice(in self: Slice_$(T)@mem, in start: u64@reg+mem+imm, in len: u64@reg+mem+imm, out buff: Slice_$(T)@mem) {
        panic_le(self.len, start, "Slice:slice: out of range");
        panic_lt(len, 0, "Slice:slice: out of range");

        buff.ptr = sizeof($(T));
        buff.ptr.imul(start);
        buff.ptr += self.ptr;

        buff.len = len;
    };
};

