import core;
import core.cmp;
import core.panic;
import alloc.memblock;

pub struct Alloc {
    table: *MemBlock,
    len: i64,
    pages: i64,
};

type Self = Alloc;

pub as new(out self: Self@mem) {
    self.table = null;
    self.len = 0;
    self.pages = 0;
};

pub as alloc(inout self: Self@mem, in size: i64@reg+mem+imm, out ptr: *void@reg+mem) {
    let flag: bool@auto;

    ptr = null;
    let memblock: *MemBlock@auto = self.table;
    for((let i: i64@auto = 0); flag.lt(i, self.len); ++i) {
        (*memblock).alloc(size, ptr);
        if(flag.neq(ptr, null)) {
            i = self.len;
        };
        memblock += sizeof(MemBlock);
    };

    if(flag.eq(ptr, null)) {
        let alloc_pages: i64@auto = size;
        alloc_pages += 4096;
        alloc_pages.shr(12);
        self.push_memblock(alloc_pages);
        self.alloc_from_last(size, ptr);
    };

    ptr.panic_null();
    !ALLOC_DEBUG;
};

as alloc_from_last(inout self: Self@mem, in size: i64@reg+mem+imm, out ptr: *void@reg+mem) {
    let last_memblock: *MemBlock@auto = self.len;
    last_memblock -= 1;
    last_memblock.imul(last_memblock, sizeof(MemBlock));
    last_memblock += self.table;

    (*last_memblock).alloc(size, ptr);
};

as push_memblock(inout self: Self@mem, in pages: i64@reg+mem) {
    let flag: bool@auto;
    
    ++ self.len;
    let new_pages: i64@auto = self.len;
    new_pages.imul(new_pages, sizeof(MemBlock));
    new_pages += 4095;
    new_pages.shr(12);
    
    if(flag.neq(new_pages, self.pages)) {
        let new_table: *MemBlock@auto = null;
        let new_size: i64@auto = new_pages;
        new_size.shl(12);
        new_table
            .mmap(new_size, 0x03, 0x22, -1, 0)
            .panic_null();

        let memcpy_dst: *void@auto = new_table;
        let memcpy_src: *void@auto = self.table;
        let memcpy_size: i64@auto = self.pages;
        memcpy_size.shl(12);
        memcpy(memcpy_dst, memcpy_src, memcpy_size);

        let munmap_addr: *void@rdi = self.table;
        let munmap_size: i64@rsi = self.pages;
        if(flag.neq(munmap_addr, null)) {
            munmap_size.shl(12);
            munmap(munmap_addr, munmap_size);
        };

        self.table = new_table;
        self.pages = new_pages;
    };

    let new_memblock: *MemBlock@auto = self.len;
    new_memblock -= 1;
    new_memblock.imul(new_memblock, sizeof(MemBlock));
    new_memblock += self.table;

    (*new_memblock).new(pages);
};

pub as dealloc(inout self: Self@mem, in ptr: *void@reg+mem) {
    let flag: bool@auto;
    if(flag.neq(ptr, null)) {
        for((let i: i64@auto = 0;); flag.lt(i, self.len); ++i) {
            let mem_block: *MemBlock@auto;
            mem_block.imul(i, sizeof(MemBlock));
            mem_block += self.table;

            let lower_bound: *void@auto;
            let upper_bound: *void@auto;
            (*mem_block).get_lower_bound(lower_bound);
            (*mem_block).get_upper_bound(upper_bound);

            if(flag.ge(ptr, lower_bound)) {
                if(flag.lt(ptr, upper_bound)) {
                    !DEALLOC_DEBUG;
                    (*mem_block).dealloc(ptr);
                };
            };
        };
    };
};

pub as drop(inout self: Alloc@mem) {
    let flag: bool@auto;

    for(let i: i64@auto = 0; flag.lt(i, self.len); ++i) {
        let mem_block: *MemBlock@auto;
        mem_block.imul(i, sizeof(MemBlock));
        mem_block += self.table;

        (*mem_block).drop();
    };

    let size: i64@auto = self.pages;
    size.shl(12);
    munmap(self.table, size);

    self.table = null;
    self.len = 0;
    self.pages = 0;
};

