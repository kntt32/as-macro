import core;
import core.mem;
import slice;

impl Slice(char);
pub struct Str {
    slice: Slice_char,
};

pub as mov(out dst: Str@mem, in src: Str@mem) {
    dst.slice = src.slice;
};

pub as len(in self: Str@mem, out len: u64@reg+mem) {
    (self.slice).len(len);
};

pub as eq(out flag: bool@reg+mem, in left: Str@mem, in right: Str@mem) {
    flag.eq(left.slice, right.slice);
};

pub as from(out self: Str@mem, in cstr: *char@reg+mem) {
    let len: u64@auto;
    let cstr_rsi: *char@auto = cstr;
    cstr_rsi.strlen(len);
    self.from(cstr_rsi, len);
};

pub as from(out self: Str@mem, in cstr: *char@reg+mem, in len: u64@reg+mem+imm) {
    self.slice.from(cstr, len);
};

pub as as_ptr(in self: Str@mem, out ptr: *char@reg+mem) {
    self.slice.as_ptr(ptr);
};

pub as from(out self: Str@mem, in cstr_array: bin@mem) {
    panic_neq(sizeof(cstr_array[0]), sizeof(char), "expected cstr array");

    let cstr_array_ptr: *char@auto;
    cstr_array_ptr =& cstr_array;

    let cstr_len: u64@auto;
    strlen(cstr_array_ptr, cstr_len);

    self.slice.from(cstr_array_ptr, cstr_len);
};

pub as index(in self: Str@mem, in index: u64@reg+mem+imm, out c: *char@reg+mem) {
    self.slice.index(index, c);
};

pub as slice(in self: Str@mem, in start: u64@reg+mem+imm, in end: u64@reg+mem+imm, out buff: Str@mem) {
    self.slice.slice(start, end, buff);
};

