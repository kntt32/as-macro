import core;
import core.fmt;
import core.option;
import std;
import std.syscall;

pub struct Out {
    fd: i32,
    buff: [u8; 1024],
    len: u64,
    primitive_flag: bool,
};

impl Option(Out);
impl Display(Out);

pub as stdout(out self: Out@mem) {
    self.fd = STDOUT;
    self.len = 0;
    self.primitive_flag = true;
};

pub as stderr(out self: Out@mem) {
    self.fd = STDIN;
    self.len = 0;
    self.primitive_flag = true;
};

pub as create(out self: Option_Out@mem, in name: Str@mem) {
    let stream: Out@stack;

    let create_flags: u64@auto = O_WRONLY;
    create_flags.or(O_CREAT);
    create_flags.or(O_TRUNC);
    
    let name_addr: *char@auto;
    name.as_ptr(name_addr);

    openat(stream.fd, AT_FDCWD, name_addr, create_flags, 0644);
    stream.len = 0;
    stream.primitive_flag = false;

    let flag: bool@auto;

    if(flag.ge(stream.fd, 0)) {
        self.some(stream);
    }else {
        self.none();
    };
};

pub as write(inout self: Out@mem, in str: Str@mem) {
    let str_addr: *char@auto;
    str.as_ptr(str_addr);
    let data_addr: *u8@auto = str_addr;

    let str_len: u64@auto;
    str.len(str_len);

    self.write(data_addr, str_len);
};

pub as mov(out dst: Out@mem, in src: Out@mem) {
    dst.fd = src.fd;
    dst.len = src.len;
    dst.primitive_flag = src.primitive_flag;
};

pub as write(inout self: Out@mem, in data: *u8@reg+mem, in len: u64@reg+mem+imm) {
    let flag: bool@auto;

    let buff_new_len: u64@auto = self.len;
    buff_new_len += len;

    if(flag.ge(buff_new_len, 1024)) {
        flush(self);
    };

    if(flag.gt(len, 1024)) {
        write(self.fd, data, len);
    }else {
        let dst: *u8@auto;
        dst =& self.buff;
        dst += self.len;
        
        memcpy(dst, data, len);
        self.len += len;
    };
};

pub as flush(inout self: Out@mem) {
    let data: *u8@auto;
    data =& self.buff;

    write(self.fd, data, self.len);

    self.len = 0;
};

pub as drop(inout self: Out@mem) {
    self.flush();

    let flag: bool@auto = self.primitive_flag;

    if(flag.not()) {
        close(self.fd);
        self.fd = -1;
    };
};


